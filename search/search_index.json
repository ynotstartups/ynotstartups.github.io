{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Who am I?","text":"<p>My name is Tiger Yuhao Huang.</p> <p></p> <p>Welcome to my digital garden!</p> <p>I am currently working as a python backend engineer at Saltus!</p> <p>My biggest passions are software engineering, home cooking, boardgames,  coffee roasting and brewing, reading, eating out, ...</p> <p>My dream is to open a cafe called \"Tou\", it sells Man Tou (Chinese steamed bun with no filling), black filter coffee, latte using hand roasted coffee beans.</p>"},{"location":"#cheatsheet-software-engineering","title":"Cheatsheet Software Engineering","text":""},{"location":"#give-consistent-code-review","title":"Give Consistent Code Review","text":"<ul> <li>add <code>doc string</code> if there is anything unclear</li> <li>understand all code and tests added/modified</li> <li>handle network and other errors gracefully?</li> <li>read and test my comments carefully</li> <li>add ideas about incremental improvements</li> </ul>"},{"location":"#write-consistent-documentations-and-git-commit-message","title":"Write Consistent Documentations and Git Commit Message","text":"<ul> <li>present tense</li> <li>one concise line </li> </ul>"},{"location":"#behavioral-personal-growth","title":"Behavioral - Personal growth","text":"<ul> <li>Take it easy!</li> <li>There is No Such Thing as Over Communication!</li> <li>Look for opportunity for incremental improvement</li> <li>Read documentation/manual/user\u2019s guide before using a new tool/cli<ul> <li>this implies prefer using tool with good doc e.g. <code>fish</code> instead <code>bash</code></li> </ul> </li> <li>Be more curious about how things work internally</li> <li>Be prepared because I am bad at ac-hoc talk and thinking<ul> <li>ask for agenda for meetings so that I can be prepared</li> </ul> </li> <li>Validate assumptions earlier</li> </ul>"},{"location":"#documentations-building-structures-with-natural-language","title":"Documentations - Building structures with natural language","text":"<ul> <li>Write non-code How To, repeatable steps for public or personal, e.g.<ul> <li>How-To deploy UAT</li> <li>How-To add a graphql endpoint </li> </ul> </li> <li>Write code comments, documentations before implementation <ul> <li>remember the 4 types of documentation, Tutorial, How-To Step by Step Guides,   Explanation, Reference</li> <li>George Orwell's 12 points</li> </ul> </li> </ul>"},{"location":"#design-writing-good-code","title":"Design - Writing good code","text":"<ul> <li>Design it twice<ul> <li>write down two designs, each with pros and cons, then perhaps there will   appear a third design with combined pros and less cons</li> </ul> </li> <li>Architect great design rather than just working codes, then writing comments   should be fun since that\u2019s how you identify the best design</li> <li>reduce complexity by adding or removing abstraction</li> </ul>"},{"location":"#meaning-of-life","title":"Meaning Of Life","text":"<p>I believe that the meaning of life is to be alive.</p> <p>I once thought the meaning of life is to enjoy every moment of life, but I don't think it is true any more because there were good days and bad days so it wasn't always possible to enjoy it.</p> <p>But being alive (please do try your best) let you experience life in both its beauty and the ugly. Life is your unique experience with the world and every choices you made.</p> <p>Others also believe in this idea.</p> <p>The meaning of life is just to be alive. It is so plain and so obvious and so simple. And yet, everybody rushes around in a great panic as if it were necessary to achieve something beyond themselves. ---- Alan Wilson Watts</p>"},{"location":"cheat-sheet-interview/","title":"Interview Cheatsheet","text":""},{"location":"cheat-sheet-interview/#on-the-day-of-the-interview","title":"On the day of the Interview","text":"<ol> <li>join via video conference app</li> <li>open up preparation doc</li> <li>open up CV</li> <li>open up job description</li> <li>pen and paper</li> </ol>"},{"location":"cheat-sheet-interview/#cover-letter","title":"Cover Letter","text":"<ul> <li>my name</li> <li>applying role</li> <li>why the company stands out to me and what i am a good fit?<ul> <li>3 bullet points regarding company's industry, value, culture</li> <li>3 bullet points regarding company's tech</li> <li>a short self intro</li> </ul> </li> <li>responsibilities in current company<ul> <li>personal project</li> <li>personal values</li> <li>tech stack</li> </ul> </li> <li>HR facts<ul> <li>contact number &amp; email?</li> <li>how long is my notice period?</li> <li>do I need sponsorship to work in the UK?</li> <li>where am I based?</li> <li>hybrid, full time or remote?</li> <li>salary expectation?</li> </ul> </li> </ul>"},{"location":"cheat-sheet-interview/#before-the-interview","title":"Before the Interview","text":""},{"location":"cheat-sheet-interview/#write-down-basic-facts-about-a-company","title":"Write down basic facts about a company","text":"<ul> <li>Link to job description?</li> <li>What is the company mission?</li> <li>What does the company do?</li> <li>How many people?</li> <li>How is the work life balance like in the company?</li> <li>What is the tech stack?</li> <li>What is the tech infrastructure?</li> <li>Is there a github account?</li> <li>Checkout the glassdoor comments for the company</li> <li>What is the name and responsibility of role?</li> <li>What is culture like in the company?</li> <li>What is work life balance in the company?</li> <li>Look for software engineer job description for employees in Linkedin</li> <li>What is income structure of the company?</li> <li>What is future of the company?</li> <li>What is the interview process?</li> <li>Who are the interviewer?</li> </ul>"},{"location":"cheat-sheet-interview/#prepare-for-questions","title":"Prepare for questions","text":"<p>Q: What change job now?</p> <ul> <li>no growth in dev team</li> <li>non-tech company</li> <li>management too busy to do 1-on-1</li> </ul> <p>Q: What interests you about the company? (Q: Why do you want to work here?</p> <ul> <li>culture</li> <li>tech stack</li> </ul> <p>Q: What do you know about us?</p> <p>Q: What makes you a good fit for the role?</p> <p>Q: Tell me about yourself</p> <ul> <li>continuous learning and adapting</li> <li>communications and trust</li> <li>high software engineering standard</li> <li>in other words, thoughtful engineer, reliability, scalability, maintainability</li> </ul> <p>Q: How to improve online testing code</p> <ul> <li>refactor</li> <li>tests</li> <li>logging</li> <li>error handling</li> <li>horizontal scaling</li> </ul> <p>Q: Strengths/Weaknesses</p> <p>Q: What is the hardest thing you've had to do during your career?</p>"},{"location":"cheat-sheet-interview/#during-the-interview","title":"During the Interview","text":"<ul> <li>be confident</li> <li>remember that the interviewers want me get the job</li> </ul> <p>Answer Questions Based On My Personal Values</p> <ol> <li>Continuous learnings</li> <li>open communications and feedbacks</li> <li>High software engineering standards</li> <li>unit tests, test coverage, code review, QA, documentations, Typing Hinting, continuous refactoring</li> </ol> <p>How to Behave</p> <ul> <li>don't make assumption and ask questions early</li> <li>be assertive and open-minded at the same time</li> <li>think out loud - communications</li> <li>understand the problem (ask for clarification, boundary conditions, corner cases ...)</li> <li>break down to sub questions</li> <li>open to suggestions and to learn</li> </ul>"},{"location":"cheat-sheet-interview/#prepare-five-reverse-questions","title":"Prepare Five Reverse Questions","text":"<p>Interviewer</p> <ul> <li>What keeps you in this company? What do you like about it?</li> </ul> <p>Role</p> <ul> <li>Can you describe a typical projects that I will be involved in? for example, the current project that you are working on</li> <li>Which team will I work in? What are the responsibilities of the team?</li> <li>What is your management style?</li> <li>What will be the ideal person for this role?</li> </ul> <p>Company</p> <ul> <li>How do you describe the company value?</li> <li>What is the growth of the company? and what is the future of the company?</li> <li>How would you pitch your team to convince me to join your team?</li> <li>what are you competitors? What makes the company competitive in the field?</li> </ul>"},{"location":"dev_notes/","title":"Software Engineering Notes","text":""},{"location":"dev_notes/#cheatsheet-vim","title":"Cheatsheet Vim","text":""},{"location":"dev_notes/#reminders","title":"Reminders","text":"<ul> <li><code>gsp</code> - motion pending operator to change anything to param style <code>foo=foo</code></li> <li><code>/foo/;/bar</code> - search the first <code>bar</code> after <code>foo</code></li> </ul>"},{"location":"dev_notes/#cheatsheet-vim-regular-expression","title":"Cheatsheet Vim - Regular Expression","text":""},{"location":"dev_notes/#reminders_1","title":"Reminders","text":"<ul> <li><code>\\zs</code>, <code>ze</code>, modify the start or end of regex match, can make replacing or   searching easier<ul> <li>e.g. <code>\\zs</code> can replace positive look behind<code>@&lt;=</code></li> <li>e.g. <code>\\ze</code> can replace positive look ahead <code>@=</code></li> </ul> </li> <li><code>\\_.</code> matches all characters and end of line, useful for multiline matching<ul> <li><code>.</code> matches all characters but not end of line</li> </ul> </li> <li><code>\\w</code> matches word characters, same as <code>[0-9A-Za-z_]</code></li> <li><code>\\s</code> matches space or tab</li> <li><code>\\{-}</code> non-greedy match, match as little as possible, this is a multi<ul> <li>basically the non-greedy version of <code>*</code></li> </ul> </li> </ul> <p>Intresting Examples</p> <ul> <li><code>\\(def\\s\\)\\@&lt;!foo_function(\\_.\\{-})</code> matches function usage and params   single line or multi lines, but not the function definition </li> <li><code>def\\s\\w*(\\zs\\_.\\{-}\\ze)</code> matches only params in function definitions,   single line or multi lines</li> </ul>"},{"location":"dev_notes/#definition-of-a-pattern-in-vim","title":"Definition of a pattern in vim","text":"<ul> <li>atom: <code>a</code> an ordinary character, <code>\\i</code> a character class, <code>\\(foo\\)</code>   putting pattern in parenthesis making it an atom</li> <li>piece: atom + multi, <code>*</code>, <code>\\{n,m}</code>, <code>{-}</code><ul> <li>special multi, look ahead <code>\\@=</code>, <code>\\@!</code>, look behind <code>\\@&lt;=</code>,<code>\\@&lt;!</code>, </li> </ul> </li> <li>concat: piece + piece, <code>a*b*</code></li> <li>branch: concat <code>\\&amp;</code> concat, <code>\\&amp;</code> means matching both regex   patterns, like AND</li> <li>pattern: branch <code>\\|</code> branch, <code>\\|</code> means either patterns, like   OR</li> </ul>"},{"location":"dev_notes/#cheatsheet-rg","title":"Cheatsheet Rg","text":"<code>-F, --fixed-strings</code> Fixed String Matches <code>-t py</code> select only python files <code>-w, --word-regexp</code> Word Regexp <code>-f, --file PATTERNFILE</code> search for all patterns,  one pattern per line <code>-s</code> case sensitive <code>-i</code> case insensitive <code>-S</code> smart case <code>-g \"**/tests/**\"</code> search only tests files with glob <code>-g \"!**/tests/**\"</code> don't search test files with inverse glob <code>!</code> <code>--stats</code> number of matches, number of line matches <code>--sort created/modified</code> sort results by file created/modified time <code>-p, --pretty</code> <code>rg -p foo | less</code>, pipe color to other program"},{"location":"dev_notes/#multi-lines-matching","title":"Multi lines matching","text":"<p>Find Python Function Definitions and Usages</p> <pre><code># this prints Definitions too because I don't know how to ignore lines\n# starts with `def`\n# \n# [^,] for removing imports\n\nrg --multiline --multiline-dotall 'foo_function_name\\(.*?\\)[^,]' -g \"!**/tests**\"\n</code></pre>"},{"location":"dev_notes/#search-for-different-casing","title":"Search For Different Casing","text":"<p><code>foo_?bar</code> searches for <code>foo_bar</code>, <code>FOO_BAR</code>, <code>FOOBAR</code>, <code>fooBar</code></p> <p>it works because</p> <ol> <li><code>_?</code> means <code>_</code> is optional, i.e. the searched words can contain 0 or 1 <code>_</code></li> <li>The search is case insensitive by default</li> </ol>"},{"location":"dev_notes/#copy-rg-result-into-pasteboard-for-pr-description","title":"Copy Rg result into pasteboard for PR description...","text":"<p><code>rg foo --heading --line-number | pbcopy</code></p> <p>Example output below</p> <pre><code>dev_notes.md\n65:## Usage Example Of curo_request_kwargs\n67:`_curo_request`\n</code></pre>"},{"location":"dev_notes/#cheatsheet-regular-expression","title":"Cheatsheet Regular Expression","text":"Rg Vim zero or more <code>?</code> <code>\\?</code> 1 or more <code>+</code> <code>\\+</code> precise number of matches <code>{n,m}</code> <code>\\{n,m}</code> word boundary <code>\\b</code> <code>\\&lt; \\&gt;</code> multiple patterns or <code>|</code> <code>\\|</code> non greedy <code>.*?</code> <code>.\\{-}</code> line starts with <code>^</code> <code>^</code> line ends with <code>$</code> <code>$</code> group <code>( )</code> <code>\\( \\)</code> back reference not supported <code>\\1 \\2 \\3</code>"},{"location":"dev_notes/#matches-different-suffixes","title":"matches different suffixes","text":"<p>Example: to match <code>company</code> and <code>companies</code></p> <ul> <li>vim: <code>compan\\(y\\|ies\\)</code> </li> <li>rg: <code>compan(y|ies)</code></li> </ul>"},{"location":"dev_notes/#cheatsheet-writings","title":"Cheatsheet Writings","text":"<p>Scrupulous writers, in every sentence that they write, will ask themselves at least four questions:</p> <ol> <li>What am I trying to say?</li> <li>What words will express it?</li> <li>What image or idiom will make it clearer?</li> <li>Is this image fresh enough to have an effect?</li> </ol> <p>Two more that they may ask are:</p> <ol> <li>Could I put it more shortly?</li> <li>Have I said anything that is avoidably ugly?</li> </ol> <p>Consequently there are ways to write well. The following rules will cover most cases:</p> <ol> <li>Never use a metaphor, simile or other figure of speech which you are used to seeing in print.</li> <li>Never use a long word where a short one will do.</li> <li>If it is possible to cut a word out, always cut it out.</li> <li>Never use the passive where you can use the active.</li> <li>Never use a foreign phrase, a scientific word or a jargon word if you can think of an everyday English equivalent.</li> <li>Break any of these rules sooner than say anything outright barbarous.</li> </ol>"},{"location":"dev_notes/#cheatsheet-software-engineering","title":"Cheatsheet Software Engineering","text":""},{"location":"dev_notes/#give-consistent-code-review","title":"Give Consistent Code Review","text":"<ul> <li>add <code>doc string</code> if there is anything unclear</li> <li>understand all code and tests added/modified</li> <li>handle network and other errors gracefully?</li> <li>read and test my comments carefully</li> <li>add ideas about incremental improvements</li> </ul>"},{"location":"dev_notes/#behavioral-personal-growth","title":"Behavioral - Personal growth","text":"<ul> <li>There is No Such Thing as Over Communication!</li> <li>Look for opportunity for incremental improvement</li> <li>Read documentation/manual/user\u2019s guide before using a new tool/cli<ul> <li>this implies prefer using tool with good doc e.g. <code>fish</code> instead <code>bash</code></li> </ul> </li> <li>Be more curious about how things work internally</li> <li>Be prepared because I am bad at ac-hoc talk and thinking<ul> <li>ask for agenda for meetings so that I can be prepared</li> </ul> </li> <li>Validate assumptions earlier</li> <li>For meetings,<ul> <li>gather questions before meeting</li> <li>set out the purpose of the meetings</li> <li>write meeting minutes and action points</li> </ul> </li> </ul>"},{"location":"dev_notes/#documentations-building-structures-with-natural-language","title":"Documentations - Building structures with natural language","text":"<ul> <li>Write non-code How To, repeatable steps for public or personal, e.g.<ul> <li>How-To deploy UAT</li> <li>How-To add a graphql endpoint </li> </ul> </li> <li>Write code comments, documentations before implementation <ul> <li>remember the 4 types of documentation, Tutorial, How-To Step by Step Guides,   Explanation, Reference</li> </ul> </li> <li>Present tense and full sentence</li> </ul>"},{"location":"dev_notes/#design-writing-good-code","title":"Design - Writing good code","text":"<ul> <li>Design it twice<ul> <li>write down two designs, each with pros and cons, then perhaps there will   appear a third design with combined pros and less cons</li> </ul> </li> <li>Architect great design rather than just working codes, then writing comments   should be fun since that\u2019s how you identify the best design</li> <li>reduce complexity by adding or removing abstraction</li> <li>Design Goal: reliable, scalable, maintainable</li> </ul>"},{"location":"dev_notes/#cheatsheet-cheatsheet","title":"Cheatsheet cheatsheet","text":"<p>Best Practices</p> <ol> <li>Keep cheatsheet and TIL one page long (after render to pdf)</li> <li>Consider if I should print them out</li> </ol>"},{"location":"dev_notes/#cheatsheet-django","title":"Cheatsheet Django","text":""},{"location":"dev_notes/#best-practices","title":"Best Practices","text":"<ul> <li><code>models</code> field<ul> <li>use <code>help_text</code> as documentation</li> <li>use <code>unique=True</code> is this field must be unique throughout the table </li> </ul> </li> </ul>"},{"location":"dev_notes/#q-f","title":"Q &amp; F","text":"<ul> <li><code>Q()</code> - represents an SQL condition that can be used in database-related   operations</li> <li><code>F()</code> - represents the value of a model field or annotation</li> </ul> <p>These two make it possible to define and reuse conditions.</p>"},{"location":"dev_notes/#cheatsheet-serverless","title":"Cheatsheet Serverless","text":"<ul> <li>deploy - <code>sls deploy</code></li> <li>package to local directory for inspection <ul> <li><code>serverless package --package ./package-with-azure-upload</code> </li> </ul> </li> </ul>"},{"location":"dev_notes/#inspect-package-size","title":"inspect package size","text":"<pre><code>sls package --package ./package-with-azure-upload\ncd package-with-azure-upload\nunzip oneview-serverless.zip -d ./unzipped\ndu -h -d 1 ./unzipped | sort --human-numeric-sort\n</code></pre>"},{"location":"dev_notes/#cheatsheet-python","title":"Cheatsheet Python","text":""},{"location":"dev_notes/#a-decorator-to-figure-out-the-order-of-how-functions-or-methods-are-called","title":"a decorator to figure out the order of how functions or methods are Called","text":"<pre><code>def print_function_name(func):\n    def _print_function_name(*args, **kwargs):\n        print(f\"--&gt; begin:  {func.__name__}\")\n        result = func(*args, **kwargs)\n        print(f\"--&gt; return: {func.__name__}\")\n        return result\n    return _print_function_name\n</code></pre>"},{"location":"dev_notes/#ipython-autoload","title":"ipython autoload","text":"<p>reload modules when user executes code, so that I don't need to exit ipython shell to reload edited code.</p> <pre><code>%load_ext autoreload\n%autoreload 2\n</code></pre>"},{"location":"dev_notes/#cheatsheet-postgres","title":"Cheatsheet Postgres","text":"<code>\\l</code> list databases <code>\\c DATABASE NAME</code> connect/switch to database <code>\\dt</code> list tables <code>\\d TABLE NAME</code> describe table <code>\\o FILE NAME</code> <code>\\o</code> save query result to a file <code>\\! shell command</code> run external shell command <p>You can do <code>\\l</code> to list all the databases, use <code>\\c</code> to connect to one database, use <code>\\d</code> to list tables in this database</p>"},{"location":"dev_notes/#drop-column","title":"Drop column","text":"<pre><code>ALTER TABLE oneview_frozencharge DROP COLUMN product_fee_charge_is_user_input_required;\n</code></pre>"},{"location":"dev_notes/#rename-table","title":"rename table","text":"<pre><code>ALTER TABLE oneview_incomeprofile RENAME COLUMN business_unit_id TO adviser_business_unit_id;\nALTER TABLE oneview_incomeprofile RENAME COLUMN adviser_business_unit_id TO business_unit_id;\n</code></pre>"},{"location":"dev_notes/#save-query-result-to-a-file","title":"save query result to a file","text":"<pre><code># start\n\\o data.txt\n\n# ...run the psql commands...e.g. \\dt\n\n# ended\n\\o\n</code></pre> <pre><code>docker-compose --file docker-compose-dev.yml exec postgres cat data.txt\n</code></pre>"},{"location":"dev_notes/#cheatsheet-bookmarklet","title":"Cheatsheet Bookmarklet","text":"<pre><code>document.querySelectorAll(\".pr-toolbar\").forEach(el =&gt; el.remove());\n</code></pre> <p>https://caiorss.github.io/bookmarklet-maker/</p> <pre><code>// print PR\ndocument.querySelectorAll(\".pr-toolbar\").forEach(e =&gt; e.remove());\nwindow.scrollTo(0, 0);\nwindow.location.href = document.URL + '?diff=unified&amp;w=0';\n</code></pre> <pre><code>// print fish shell doc\ndocument.querySelectorAll('.sphinxsidebar').forEach(e =&gt; e.remove())\ndocument.querySelectorAll('.bodywrapper').forEach(e =&gt; e.style.marginLeft = \"0\")\n</code></pre>"},{"location":"dev_notes/#cheatsheet-vim9script","title":"Cheatsheet vim9script","text":""},{"location":"dev_notes/#vim9script-examples","title":"vim9script examples","text":""},{"location":"dev_notes/#vim-function-and-variable-var","title":"vim function and variable <code>var</code>","text":"<pre><code># vim9script reminder\n# use `var` to define variable, instead of `let`\n\n# boolean\ntrue\nfalse\n\n# option value &amp;foo \necho &amp;number\n# assigns value to option\n&amp;number = 1\n\n# contents of register `q`\necho @q\n# remove or set contents of register `q`\n@q = \"\"\n# set register q in linewise mode\nsetreg('q', '', 'V')\n\n# string concatenation\nvar foo = \"abc\" .. \"def\"\n# string interpolation\nvar name = \"tiger\"\necho $\"hello {name}!\"\n\n# setting variable name to register\n# @0 is last yanked text\nvar name = @0\n\n# list\nvar foo_list = [1, 2, 3]\nvar first_item = foo_list[0]\nvar first_two_items = foo_list[0 : 2]\nvar last_two_items = foo_list[-2 : ]\n# list concatenation\nvar foo_list_extended = foo_list + [4, 5] \n# builtin list methods\nmylist-&gt;add(val1)-&gt;add(val2)\nmylist-&gt;copy()\nmylist-&gt;count(val)\nmylist-&gt;empty()\nmylist-&gt;extend(otherlist)\nmylist-&gt;filter(expr2)\nmylist-&gt;flatten()\nmylist-&gt;foreach(expr2)\nmylist-&gt;indexof(expr)\nmylist-&gt;insert(item)\nmylist-&gt;join()\nmylist-&gt;len()\nmylist-&gt;map(expr2)\nmylist-&gt;max()\nmylist-&gt;min()\nmylist-&gt;remove(idx)\nmylist-&gt;repeat(count)\nmylist-&gt;reverse()\nmylist-&gt;sort()\nmylist-&gt;string()\nmylist-&gt;type()\nmylist-&gt;uniq()\n\n# dictionary\nvar foo = {\"a\": 1, \"b\": 2, \"c\": 3}\nechomsg foo[\"a\"]\nfor [key, value] in foo-&gt;items()\n    echomsg key value\nendfor\n# dictionary methods\nmydict-&gt;has_key(key)\nmydict-&gt;items()\nmydict-&gt;keys()\nmydict-&gt;values()\n\n# if\nvar a = 1.5\nif a &gt; 2\n    echo \"a &gt; 2\" a\nelseif a &gt; 1\n    echo \"a &gt; 1\" a\nelse\n    echo \"a &lt; 1\" a\nendif\n\n# for loop\nvar foo = [1, 2, 3]\nfor i in foo\n    echo i\nendfor\n\n# regex match, right hand side string is used as a pattern\n# echo true\necho \"foo\" =~ '^f.*'\n# echo false\necho \"foo\" =~ 'b.*'\n\n# powerful commands\n\n# execute the string from the evaluation of {expr1} as an cli # command\nexecute \"normal @q\"\n\n# calling vim builtin function, see `:help builtin.txt`\n# see help for builtin function `substitute` at `:help substitude()`\nvar remove_prefix = substitute(posix_file_path, '^saltus/', '', 'g')\n\n# Types\n\nfloat, string, bool, number, float, string, blob, list&lt;type&gt;, dict&lt;type&gt;, job,\nchannel, func\n</code></pre>"},{"location":"dev_notes/#example-function-implementation","title":"Example function implementation","text":"<pre><code>def GetWordAfterPrefix(prefix_string: string): string\n  # search for the line number and column number for the prefix_string\n  # e.g. the line and column of character 'f' in `def \\zsfoo` \n  # flag `b` - search backward  \n  # flag `n` - do not move the cursor\n  # see also `:help search()`\n  var [match_line_number, match_col_number] = (prefix_string .. '\\zs')-&gt;searchpos('bn')\n  var line = getline(match_line_number)\n  # get the word with matching column position - 1, `-1` is needed to include\n  # the first character of the word, e.g. word would be `foo`\n  var word = line-&gt;matchstr('\\w*', match_col_number - 1)\n  return word\nenddef\n\ndef g:YankWordAfterPrefix(prefix_string: string)\n  var word = GetWordAfterPrefix(prefix_string)\n  echom 'yanked' word\n  setreg('+', word)\nenddef\n\nnnoremap &lt;leader&gt;yf :call YankWordAfterPrefix(\"def \")&lt;cr&gt;\nnnoremap &lt;leader&gt;yc :call YankWordAfterPrefix(\"class \")&lt;cr&gt;\n\ndef GetPythonFileImportPath(): string\n    var posix_file_path = expand(\"%\")\n    var python_import_path = posix_file_path\n                                -&gt;substitute('^saltus/', '', 'g')\n                                -&gt;substitute('.py$', '', 'g')\n                                -&gt;substitute('/', '.', 'g')\n    return python_import_path\nenddef\n</code></pre>"},{"location":"dev_notes/#using-python-in-vim","title":"Using python in vim","text":"<pre><code>def g:JumpToTestFile()\npy3 &lt;&lt; EOF\nfrom vim_python import get_or_create_alternative_file\n\n# vim.eval(\"@%\") gets the filepath in current buffer\ntest_filepath = get_or_create_alternative_file(filepath=vim.eval(\"@%\"))\n\n# open test_filepath in current window\nvim.command(f\"tabnew {test_filepath}\")\nEOF\nenddef\n</code></pre>"},{"location":"dev_notes/#running-a-vimscript-file-foovim","title":"running a vimscript file foo.vim","text":"<pre><code>&gt; cat foo.vim\nvim9script\nvar a = [1, 2, 3]\nechomsg a\n&gt; vim -S foo.vim\n</code></pre>"},{"location":"dev_notes/#cheatsheet-terraform","title":"Cheatsheet Terraform","text":""},{"location":"dev_notes/#tf-language-blocks","title":"tf language Blocks","text":"<ul> <li><code>terraform</code> - terraform settings and dependent providers</li> <li><code>provider</code> - configs for the specific provider</li> <li><code>resource</code> - defines components of the infrastructure, requires 2 strings   \"resource type\" and \"resource name\"</li> <li><code>variable</code> - defines variables</li> <li><code>output</code> - use to connect the terraform projects with other poarts of your   infrastructure or with other terraform projects</li> </ul>"},{"location":"dev_notes/#terraform-cli-commands","title":"terraform cli commands","text":"<ul> <li><code>init</code> - initializes a working directory containing Terraform configuration   files. It is safe to run this command multiple times.</li> </ul> <p>Provisioning Infrastructure</p> <ul> <li><code>plan</code> - presents a plan for making changes, dry-run of <code>apply</code></li> <li><code>apply</code> - applies the planned changes to each resource using the relevant   infrastructure provider's API</li> <li><code>destroy</code> - destroys all of the resources being managed by the current   working directory and workspace</li> </ul> <p>Inspecting Infrastructure</p> <ul> <li><code>graph</code> - creates a visual representation of a configuration or a set of   planned changes.</li> <li><code>output</code> - can get the values for the top-level output values of a   configuration</li> <li><code>show</code> -  can generate human-readable versions of a state file or plan file,   or generate machine-readable versions that can be integrated with other   tools.</li> </ul> <p>Developing</p> <ul> <li><code>fmt</code> - format</li> <li><code>validate</code> - validates the configuration files in a directory, referring only   to the configuration and not accessing any remote services such as remote   state, provider APIs, etc.</li> </ul> <p>See Also: https://developer.hashicorp.com/terraform/cli</p>"},{"location":"dev_notes/#book-designing-data-intensive-applications-23may24","title":"Book - Designing Data-Intensive Applications                      - 23/May/24","text":""},{"location":"dev_notes/#acid-atomicity-and-isolation-page-228","title":"ACID, atomicity and isolation, page 228","text":"<p>Atomicity</p> <p>If an error occurs halfway through a sequence of writes, the transaction should be aborted, and the writes made up to that point should be discarded. In other words, the database saves you from having to worry about partial failure, by giving an all-or-nothing guarantee.</p> <p>Isolation</p> <p>Concurrently running transactions shouldn't interfere with each other. For example, if one transaction makes several writes, then another transaction should see either all or none of those writes, but not some subset.</p>"},{"location":"dev_notes/#key-feature-of-transaction-page-231","title":"Key feature of transaction, page 231","text":"<p>A key feature of a transaction is that it can be aborted and safely retried if an error occurred. ACID databases are based on this philosophy: if the database is in danger of violating its guarantee of atomicity, isolation, or durability, it would rather abandon the transaction entirely than allow it to remain half-finished.</p>"},{"location":"dev_notes/#faults-and-partial-failures-page-274","title":"Faults and Partial Failures, page 274","text":"<p>There is no fundamental reason why software on a single computer should be flaky: when the hardware is working correctly, the same operation always produces the same result (it is deterministic). If there is a hardware problem, the consequence is usually a total system failure.</p> <p>In a distributed systems, there may well be some parts of the system that are broken in some unpredictable way, even though other parts of the system are working fine. This is known as partial failure. The difficulty is that partial failures are non-deterministic: if you try to do anything involving multiple nodes and the network, it may sometimes work and sometimes unpredictably fail.</p> <p>This non-determinism and possibility of partial failures is that makes distributed systems hard to work with.</p>"},{"location":"dev_notes/#why-do-we-need-distributed-system-page-311","title":"Why do we need distributed system?, page 311","text":"<p>Scalabilty is not the only reason for wanting to use a distributed system. Fault tolerance and low latency (by placing data geographically close to users) are equally important goals, and those things can not be achieved with a single node.</p>"},{"location":"dev_notes/#system-models-page-307","title":"System Models, page 307","text":"<p>we somehow formalize the kinds of faults that we expect to happen in a system. We do this by defining a system model, which is an abstraction that describes what things an algorithm may assume.</p>"},{"location":"dev_notes/#system-models-regarding-timing-assumptions","title":"System Models regarding timing assumptions","text":"<p>Synchronous model</p> <p>The synchronous model assumes bounded network delay, bounded process pauses, and bounded clock error. This does not imply exactly synchronized clocks or zero network delay; it just means you know that network delay, pauses, and clock drift will never exceed some fixed upper bound. The synchronous model is not a realistic model of most practical systems, because (as discussed in this chapter) unbounded delays and pauses do occur.</p> <p>Partially synchronous model - Realistic Assumption</p> <p>Partial synchrony means that a system behaves like a synchronous system most of the time, but it sometimes exceeds the bounds for network delay, process pauses, and clock drift. This is a realistic model of many systems: most of the time, networks and processes are quite well behaved\u2014otherwise we would never be able to get anything done\u2014but we have to reckon with the fact that any timing assumptions may be shattered occasionally. When this happens, network delay, pauses, and clock error may become arbitrarily large.</p>"},{"location":"dev_notes/#system-models-regarding-node-failures","title":"System Models regarding node failures","text":"<p>Crash-stop faults</p> <p>In the crash-stop model, an algorithm may assume that a node can fail in only one way, namely by crashing. This means that the node may suddenly stop responding at any moment, and thereafter that node is gone forever\u2014it never comes back.</p> <p>Crash-recovery faults - Realistic Assumption</p> <p>We assume that nodes may crash at any moment, and perhaps start responding again after some unknown time. In the crash-recovery model, nodes are assumed to have stable storage (i.e., nonvolatile disk storage) that is preserved across crashes, while the in-memory state is assumed to be lost.</p>"},{"location":"dev_notes/#definition-of-stream","title":"Definition of Stream","text":"<p>In general, a \"stream\" refers to data that is incrementally made available over time.The concept appears in many places: in the<code>stdin</code> and <code>stdout</code> of Unix, programming languages (lazy lists), filesystem APIs (such as Java's <code>FileInputStream</code>)</p>"},{"location":"dev_notes/#til-python-set-timeout-in-requests-library-08aug23","title":"TIL - Python: Set Timeout In Requests Library                     - 08/Aug/23","text":"<pre><code># timeout = (connect timeout, read timeout)\nrequests.get('https://github.com', timeout=(3, 27))\n</code></pre> <p>By default, requests do not time out unless a timeout value is set explicitly. Without a timeout, your code may hang for minutes or more. It\u2019s a good practice to set connect timeouts to slightly larger than a multiple of 3, which is the default TCP packet retransmission window. Doc from requests</p>"},{"location":"dev_notes/#til-python-assert-logs-with-python-unittest-08aug23","title":"TIL - Python: Assert Logs With Python Unittest                    - 08/Aug/23","text":"<pre><code>with self.assertLogs('foo', level='INFO') as cm:\n    logging.getLogger('foo').info('first message')\n    logging.getLogger('foo.bar').error('second message')\nself.assertEqual(cm.output, ['INFO:foo:first message',\n                             'ERROR:foo.bar:second message'])\n</code></pre> <p>https://docs.python.org/3/library/unittest.html#unittest.TestCase.assertLogs</p>"},{"location":"dev_notes/#til-bash-command-env-for-printing-environment-variabls-in-shell-08aug23","title":"TIL - Bash: Command env for printing environment variabls in shell- 08/Aug/23","text":"<pre><code>$ docker run ubuntu env\n</code></pre> <pre><code>$ env\n\nPYTHONUNBUFFERED=1\nCELERY_BROKER_URL=amqp://guest:guest@rabbitmq:5672//\nCHOKIDAR_USEPOLLING=true\nHOSTNAME=af072bc9372e\nPYTHON_VERSION=3.8.17\nCELERY_RESULT_BACKEND=django-db\nPWD=/app/backend\nPYTHON_SETUPTOOLS_VERSION=57.5.0\nHOME=/root\nLANG=C.UTF-8\nAWS_SECRET_ACCESS_KEY=\nONEVIEW_ENV=DEV\nTERM=xterm\nSHLVL=1\nAWS_ACCESS_KEY_ID=\nPYTHON_PIP_VERSION=23.0.1\nPYTHON_GET_PIP_SHA256=96461deced5c2a487ddc65207ec5a9cffeca0d34e7af7ea1afc470ff0d746207\nPYTHON_GET_PIP_URL=https://github.com/pypa/get-pip/raw/0d8570dc44796f4369b652222cf176b3db6ac70e/public/get-pip.py\nPATH=/root/.local/bin:/usr/local/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin\nAWS_SESSION_TOKEN=\n_=/usr/bin/env\n</code></pre>"},{"location":"dev_notes/#til-git-understanding-git-log-09aug23","title":"TIL - Git: Understanding Git Log                                  - 09/Aug/23","text":"<ol> <li>commit object filename/hash <code>5a761fe</code> actually sits in <code>.git/objects/5a/761</code></li> <li><code>index a871d21e..00000000</code> means <code>file hash before commit..file hash after commit</code><ul> <li><code>a871d21e</code> is the object representing the file, <code>000000</code> is no index /dev/null, this means deleting a file.</li> <li>If it's new file it would be <code>00000000..a871d21e</code></li> <li>If it's change of some file contents, not new or delete, it would be <code>hash..hash</code> e.g. <code>abcs23rr..a871d21e</code></li> </ul> </li> </ol> <pre><code>commit 5a761fe301ebfe45e0a72d99e619102cba149e6d (HEAD -&gt; ON-1987-tiger-test-remove-aws-credentials, origin/ON-1987-tiger-test-remove-aws-credentials) \nAuthor: ynotstartups &lt;ynotstartups@gmail.com&gt;\nDate:   Tue Aug 8 18:15:54 2023 +0100\n\n    remove not needed configure_aws.sh\n\n    The following environment variables are provided in github action\n    aws-actions/configure-aws-credentials@v2 used in docker-compose-dev.yml\n\ndiff --git a/.github/configure_aws.sh b/.github/configure_aws.sh\ndeleted file mode 100644\nindex a871d21e..00000000\n--- a/.github/configure_aws.sh\n+++ /dev/null\n@@ -1,13 +0,0 @@\n-#!/bin/sh\n-set -eu\n-\n-export_aws_credentials () {\n-   awsProfile=${AWS_PROFILE:-default}\n-   AWS_ACCESS_KEY_ID=$(aws --profile \"$awsProfile\" configure get aws_access_key_id)\n-   AWS_SECRET_ACCESS_KEY=$(aws --profile \"$awsProfile\" configure get aws_secret_access_key)\n-   AWS_SESSION_TOKEN=$(aws --profile \"$awsProfile\" configure get aws_session_token)\n-   export AWS_ACCESS_KEY_ID AWS_SECRET_ACCESS_KEY AWS_SESSION_TOKEN\n-\n-}\n-\n-export_aws_credentials\n</code></pre>"},{"location":"dev_notes/#til-bash-resolve-dns-ip-addresses-in-mac-10aug23","title":"TIL - Bash: Resolve DNS ip addresses in Mac                       - 10/Aug/23","text":"<pre><code>&gt; dscacheutil -q host -a name google.com\nname: google.com\nipv6_address: 2a00:1450:4009:820::200e\n\nname: google.com\nip_address: 142.250.187.238\n</code></pre> <pre><code>&gt; nslookup google.com\nServer:     fe80::1%15\nAddress:    fe80::1%15#53\n\nNon-authoritative answer:\nName:   google.com\nAddress: 142.250.187.238\n</code></pre>"},{"location":"dev_notes/#til-python-get-file-path-to-python-source-codes-11aug23","title":"TIL - Python: Get File Path To Python Source Codes                - 11/Aug/23","text":"<p>in iPython</p> <pre><code>&gt;&gt;&gt; import requests\n&gt;&gt;&gt; requests??\n&gt;&gt;&gt; import this\n&gt;&gt;&gt; this??\n</code></pre>"},{"location":"dev_notes/#til-vim-open-errors-in-quickfix-list-for-vim-17aug23","title":"TIL - Vim: Open Errors in Quickfix List For Vim                   - 17/Aug/23","text":"<ol> <li>in Vim, run command <code>:cexpr system('command that returns quickfix format')</code></li> <li>in Terminal, <code>vim -q &lt;(command that returns quickfix error format)</code></li> </ol> <p>Example for quickfix format</p> <pre><code>./lambdas/atr_notification/__init__.py:1:1: F401 'json' imported but unused\n./lambdas/atr_notification/__init__.py:2:1: F401 'boto3' imported but unused\n./lambdas/atr_notification/__init__.py:4:1: F401 'lambdas.common.config.oneview.SNS_TARGET_ARN' imported but unused\n</code></pre> <p>Example quick hack of loading output into vim quickfix</p> <pre><code>alias ,a='docker compose run --rm serverless python -m mypy run.py lambdas/ tests/ &gt; quickfix.vim ; cat quickfix.vim'\nalias ,s='vim -q quickfix.vim'\n</code></pre>"},{"location":"dev_notes/#til-vim-terminal-color-scheme-25aug23","title":"TIL - Vim: Terminal Color Scheme                                  - 25/Aug/23","text":"<p>I learn that I should enable my true color support which makes molokai color theme much better to see.</p> <p><code>set termguicolors</code></p> <p>Useful links</p> <p>Test your terminal color molokai color scheme</p>"},{"location":"dev_notes/#til-docker-how-does-docker-use-cache-27aug23","title":"TIL - Docker: How does docker use cache?                          - 27/Aug/23","text":"<p>Docker uses cache when the following two rules are met.</p> <ol> <li>when the docker command is not <code>ADD</code> or <code>COPY</code>, e.g. <code>RUN</code>     a. given parent image in cache      b. look at next instruction     c. if there is any child image (derived from parents) with the exact same     instruction use it as cache</li> <li>For <code>ADD</code> and <code>COPY</code> command, compare checksum of each file with exsiting    images, if checksum is different then cache is invalidated</li> </ol>"},{"location":"dev_notes/#til-git-git-checkout-27aug23","title":"TIL - Git: git checkout                                           - 27/Aug/23","text":"<p>Since git version 2.23.0, see changelog, all functionalities of <code>git checkout</code> is replaced by <code>git restore</code> and <code>git switch</code>, make <code>git checkout</code> obsolete.</p> <p>Two new commands \"git switch\" and \"git restore\" are introduced to split \"checking out a branch to work on advancing its history\" and \"checking out paths out of the index and/or a tree-ish to work on advancing the current history\" out of the single \"git checkout\" command.</p> <p>for example,</p> <p><code>git checkout &lt;commit&gt;</code> is replaced by <code>git switch</code> for </p> <p><code>git checkout [commit] &lt;paths&gt;</code> is replaced by <code>git restore</code></p>"},{"location":"dev_notes/#til-git-git-reset-27aug23","title":"TIL - Git: git reset                                              - 27/Aug/23","text":"<p>Reset, restore and revert    There are three commands with similar names: git reset, git restore and git revert.    \u2022   git-revert(1) is about making a new commit that reverts the changes made by other commits.    \u2022   git-restore(1) is about restoring files in the working tree from either the index or another commit. This command does not update your branch. The        command can also be used to restore files in the index from another commit.    \u2022   git-reset(1) is about updating your branch, moving the tip in order to add or remove commits from the branch. This operation changes the commit        history.    git reset can also be used to restore the index, overlapping with git restore.</p> <ul> <li><code>git reset --soft    &lt;commit&gt;</code> - changes HEAD to point to commit, put changes   at index</li> <li><code>git reset [--mixed] &lt;commit&gt;</code> - changes HEAD to point to commit, makes index   look like HEAD</li> <li><code>git reset --hard    &lt;commit&gt;</code> - changes HEAD to point to commit, discard   changes in index and work directory</li> </ul> <p>Conclusion, it's still too difficult to understand <code>git reset</code>, hmm, just stay away from <code>git reset</code>.</p> <p>If I want to change branch, uses <code>git rebase</code> with fixup or squash.</p>"},{"location":"dev_notes/#til-vim-vim-man-page-search-for-short-option-27aug23","title":"TIL - Vim: vim man page search for short option                   - 27/Aug/23","text":"<p>combine <code>/</code> <code>\\C</code> <code>\\&lt;</code> <code>-g</code> <code>\\&gt;</code></p> <ul> <li><code>\\C</code> to turn on the case sensitivity case</li> <li><code>\\&lt;</code> <code>\\&gt;</code> for word search</li> <li><code>\\g</code> example for short option</li> </ul>"},{"location":"dev_notes/#til-vim-dont-use-vim-to-act-as-pager-or-man-page-reader-27aug23","title":"TIL - Vim: don't use vim to act as pager or man page reader       - 27/Aug/23","text":"<p>Vim doesn't interpret ansi sequences good enough, see the following photo.</p> <p></p>"},{"location":"dev_notes/#til-python-python-wheel-31aug23","title":"TIL - Python: python wheel                                        - 31/Aug/23","text":"<p>output for installing source distribution (not wheel)</p> <p>downloading tar.gz and building wheel</p> <pre><code>&gt; python -m pip install 'uwsgi==2.0.*'\n\nCollecting uwsgi==2.0.*\n  Downloading uwsgi-2.0.22.tar.gz (809 kB)\n     ---------------------------------------- 809.7/809.7 kB 13.4 MB/s eta 0:00:00\n  Preparing metadata (setup.py) ... done\nBuilding wheels for collected packages: uwsgi\n  Building wheel for uwsgi (setup.py) ... done\n  Created wheel for uwsgi: filename=uWSGI-2.0.22-cp311-cp311-macosx_13_0_arm64.whl size=400536 sha256=a79b882b505a3093feed13f859dfa01e1ce04651abd125d418509505bc861d94\n  Stored in directory: /Users/yuhao.huang/Library/Caches/pip/wheels/93/59/2d/d21852a9f9607e9494b5d3c96d11f348d11039f7c47223c9ce\nSuccessfully built uwsgi\nInstalling collected packages: uwsgi\nSuccessfully installed uwsgi-2.0.22\n</code></pre> <p>output for installing wheel</p> <p>there\u2019s no build stage when pip finds a compatible wheel on PyPI.</p> <pre><code>&gt; python -m pip install 'chardet==3.*'\nCollecting chardet==3.*\n  Downloading chardet-3.0.4-py2.py3-none-any.whl (133 kB)\n     ---------------------------------------- 133.4/133.4 kB 4.8 MB/s eta 0:00:00\nInstalling collected packages: chardet\nSuccessfully installed chardet-3.0.4\n</code></pre> <p>A Python .whl file is essentially a ZIP (.zip) archive with a specially crafted filename that tells installers what Python versions and platforms the wheel will support.</p> <p><code>{dist}-{version}(-{build})?-{python}-{abi}-{platform}.whl</code></p> <p><code>cryptography-2.9.2-cp35-abi3-macosx_10_9_x86_64.whl</code></p>"},{"location":"dev_notes/#til-misc-ascii-encoding-02sep23","title":"TIL - Misc: ASCII encoding                                        - 02/Sep/23","text":"<p>hexadecimal dump of ascii charaters</p> <p>from <code>man ascii</code></p> <p>The control characters in ASCII still in common use include:</p> <ul> <li><code>0x00 (null, NUL, \\0, ^@)</code>, originally intended to be an ignored character,   but now used by many programming languages including C to mark the end of a   string.</li> <li><code>0x07 (bell, BEL, \\a, ^G)</code>, which may cause the device to emit a warning such   as a bell or beep sound or the screen flashing.</li> <li><code>0x08 (backspace, BS, \\b, ^H)</code>, may overprint the previous character.</li> <li><code>0x09 (horizontal tab, HT, \\t, ^I)</code>, moves the printing position right to the   next tab stop.</li> <li><code>0x0A (line feed, LF, \\n, ^J)</code>, moves the print head down one line, or to the   left edge and down. Used as the end of line marker in most UNIX systems and   variants.</li> <li><code>0x0B (vertical tab, VT, \\v, ^K)</code>, vertical tabulation.</li> <li><code>0x0C (form feed, FF, \\f, ^L)</code>, to cause a printer to eject paper to the top   of the next page, or a video terminal to clear the screen.</li> <li><code>0x0D (carriage return, CR, \\r, ^M)</code>, moves the printing position to the start   of the line, allowing overprinting. Used as the end of line marker in Classic   Mac OS, OS-9, FLEX (and variants). A CR+LF pair is used by CP/M-80 and its   derivatives including DOS and Windows, and by Application Layer protocols such   as FTP, SMTP, and HTTP.</li> <li><code>0x1A (Control-Z, SUB, ^Z)</code>, Acts as an end-of-file for the Windows text-mode   file i/o.</li> <li> <p><code>0x1B (escape, ESC, \\e (GCC only), ^[)</code>. Introduces an escape sequence.</p> </li> <li> <p>Control characters may be described as doing something when the user inputs   them, such as code 3 (End-of-Text character, ETX, ^C) to interrupt the running   process, or code 4 (End-of-Transmission character, EOT, ^D), used to end text   input on Unix or to exit a Unix shell. These uses usually have little to do   with their use when they are in text being output.</p> </li> </ul> <p>to see the hex value for characters</p> <p><code>od -t a -t x1 -t c</code></p> <ul> <li><code>-t a</code>  - prints in ascii format</li> <li><code>-t x1</code> - prints in hex format</li> <li><code>-t c</code>  - prints in c escape format</li> </ul> <p>e.g.</p> <pre><code>&gt; printf '\\0\\a\\b\\n\\r\\t\\v ' | od -t a -t x1 -t c\n0000000  nul bel  bs  nl  cr  ht  vt  sp\n          00  07  08  0a  0d  09  0b  20\n          \\0  \\a  \\b  \\n  \\r  \\t  \\v\n0000010\n</code></pre> <p>Understanding the color escape code</p> <p><code>\\033</code> is actually ESC character in ascii octal format, <code>\\e</code> is equivalent in zsh shell, however, don't use <code>\\e</code>, <code>\\e</code> is not recognised in <code>awk</code> nor <code>python</code>.</p> <p><pre><code>&gt; echo \"\\033[31mRed Text\\033[0m\"\nRed Text\n&gt; echo \"\\e[31mRed Text\\e[0m\"\nRed Text\n</code></pre> - <code>\\033[</code>  - Begin the color modifications - <code>CODEm</code> - CODE + <code>m</code> at the end - <code>\\e[0m</code>  - End the color modifications</p> code description <code>30</code> fg black <code>31</code> fg red <code>32</code> fg green <code>33</code> fg brown <code>34</code> fg blue <code>35</code> fg purple <code>36</code> fg cyan <code>37</code> fg light grey <code>40</code> bg black <code>41</code> bg red <code>42</code> bg green <code>43</code> bg brown <code>44</code> bg blue <code>45</code> bg purple <code>46</code> bg cyan <code>47</code> bg light grey <code>0</code> reset / normal <code>1</code> bold <code>3</code> italic <code>4</code> underline <pre><code>&gt; for i in {1..111}\ndo\n    echo '\\\\e['$i'm' \"\\e[${i}mtext\\e[0m\"\ndone | column\n</code></pre> <p></p>"},{"location":"dev_notes/#til-vim-gq-formatoption-05sep23","title":"TIL - Vim: gq formatoption                                        - 05/Sep/23","text":"<p>Current formatoption for markdown is <code>formatoption=jtln</code> from <code>set formatoptions?</code></p> <pre><code>                        *fo-j*\n</code></pre> <p>j   Where it makes sense, remove a comment leader when joining lines.  For     example, joining:         int i;   // the index ~                  // in the list ~     Becomes:         int i;   // the index in the list ~</p> <pre><code>                        *fo-t*\n</code></pre> <p>t   Auto-wrap text using 'textwidth'</p> <pre><code>                        *fo-l*\n</code></pre> <p>l   Long lines are not broken in insert mode: When a line was longer than     'textwidth' when the insert command started, Vim does not     automatically format it.</p> <pre><code>                        *fo-n*\n</code></pre> <p>n   When formatting text, recognize numbered lists.  This actually uses     the 'formatlistpat' option, thus any kind of list can be used.  The     indent of the text after the number is used for the next line.  The     default is to find a number, optionally followed by '.', ':', ')',     ']' or '}'.  Note that 'autoindent' must be set too.  Doesn't work     well together with \"2\".     Example: &gt;         1. the first item            wraps         2. the second item</p>"},{"location":"dev_notes/#til-git-vs-05sep23","title":"TIL - Git: .. vs ...                                              - 05/Sep/23","text":""},{"location":"dev_notes/#to-see-the-code-diff-in-feature-branch","title":"To see the code diff in <code>feature</code> branch?","text":"<pre><code>git diff master...feature\n</code></pre>"},{"location":"dev_notes/#to-see-the-commits-added-in-feature-branch","title":"To see the commits added in <code>feature</code> branch?","text":"<pre><code>git log master..feature\n</code></pre>"},{"location":"dev_notes/#explanation-for-git-diff","title":"Explanation for <code>git diff</code>","text":"<p>Use the three dots like this <code>git diff [&lt;options&gt;] &lt;commit&gt;...&lt;commit&gt;</code>.</p> <pre><code>  B---C---D master (Branch)\n /\nA\n \\\n  H---I feature (Branch)\n</code></pre> <p>Two dots - show the diffs between all changes on both sides, use the <code>git diff master..feature</code>, output: (diff of <code>H, I</code> against <code>B, C, D</code>)</p> <p>Three dots - to show the diffs between the last common ancestor (A), aka the commit we started the feature branch, use <code>git diff master...feature</code>, output: (diff of <code>H, I</code> against <code>A</code>).</p>"},{"location":"dev_notes/#note-that-and-dont-have-the-same-meaning-in-git-log","title":"Note that ... and .. don't have the same meaning in git log","text":"<p>However, \"diff\" is about comparing two endpoints, not ranges, and the range notations (\"..\" and \"...\") do not mean a range as defined in the \"SPECIFYING RANGES\" section in gitrevisions[7]. <p>from <code>git diff --help</code></p>"},{"location":"dev_notes/#explanation-for-git-log","title":"Explanation for <code>git log</code>","text":"<p>Kind of like reversing the meaning for <code>...</code> and <code>..</code> in <code>git diff</code></p> <pre><code>git log master..feature\n\n# equivalent to\n\ngit log ^master feature\n\n# refers to commit `H and I`\n</code></pre> <pre><code>git log master...feature\n\n# equivalent to\n\ngit log master feature --not $(git merge-base --all master feature)\n\n# refers to commit `B, C,D, H and I`\n</code></pre> <p>See <code>man gitrevision</code> under <code>SPECIFYING RANGES</code> section</p>"},{"location":"dev_notes/#see-also","title":"See also","text":"<p>The best stack overflow explanation see here</p>"},{"location":"dev_notes/#til-misc-thoughts-on-shortcuts-06sep23","title":"TIL - Misc: Thoughts On Shortcuts                                 - 06/Sep/23","text":"<p>It's not about the most efficient / least keystockes, it's more about making them suit my own personal way of working.</p>"},{"location":"dev_notes/#til-vim-tips-about-fugitive-06sep23","title":"TIL - Vim: Tips about Fugitive                                    - 06/Sep/23","text":"<ul> <li><code>:Gedit Head~3:%</code> to load the current file in buffer 3 commits ago, like <code>git   restore --source=HEAD~3</code> current filename</li> <li><code>:Gvdiffsplit origin/master:%</code> to see git diff with file in origin/master<ul> <li>and <code>&lt;ctrl-l&gt;</code> to switch</li> </ul> </li> </ul>"},{"location":"dev_notes/#til-vim-some-links-about-mapping-06sep23","title":"TIL - Vim: Some links about mapping                               - 06/Sep/23","text":"<ul> <li><code>:verbose nmap ]]</code> - to find out which file that mapping is defined in. From   there you should be able to figure out which plugin that file is a part of</li> </ul> <p>Useful resources on how to do mappings below</p> <p>https://vim.fandom.com/wiki/Mapping_keys_in_Vim_-Tutorial(Part_2)</p> <p>https://learnvimscriptthehardway.stevelosh.com/chapters/30.html</p>"},{"location":"dev_notes/#til-vim-find-out-vims-python-10sep23","title":"TIL - Vim: Find out vim's python                                  - 10/Sep/23","text":"<ul> <li><code>:py3 import os;print(os.__file__)</code> - print path of python<ul> <li>/opt/homebrew/Cellar/python@3.11/3.11.4_1/Frameworks/Python.framework/Versions/3.11/lib/python3.11/os.py</li> <li>using the system python at the n fmoment</li> </ul> </li> </ul>"},{"location":"dev_notes/#til-vim-matches-on-the-second-occurrence-17sep23","title":"TIL - Vim: Matches on the second occurrence                       - 17/Sep/23","text":"<p>For example, I want to match on the second <code>&lt;</code> of the following line</p> <pre><code>cnoremap &lt;c-j&gt;   &lt;down&gt;\ncnoremap &lt;c-k&gt;   &lt;up&gt;\ncnoremap &lt;up&gt;    &lt;nop&gt;\ncnoremap &lt;down&gt;  &lt;nop&gt;\ncnoremap &lt;left&gt;  &lt;nop&gt;\ncnoremap &lt;right&gt; &lt;nop&gt;\n</code></pre> <p>Uses pattern <code>&lt;.*\\zs&lt;</code></p> <ul> <li><code>&lt;</code>   - matches the first <code>&lt;</code></li> <li><code>.*</code>  - greedy matches everything after</li> <li><code>\\zs</code> - resets the start of the pattern matches (a vim specific pattern)</li> <li><code>&lt;</code>   - matches the second <code>&lt;</code></li> </ul> <p>Bonus:</p> <p><code>sed -n 's/&lt;.*\\(&lt;\\)/\\1/p'</code> changes <code>cnoremap &lt;c-j&gt;   &lt;down&gt;</code> to <code>cnoremap &lt;down&gt;</code>, something like delete the first <code>&lt;&gt;</code></p> <p><code>sed -n 's/\\(&lt;.*\\)&lt;.*&gt;/\\1/p'</code> changes <code>cnoremap &lt;c-j&gt;   &lt;down&gt;</code> to <code>cnoremap &lt;c-j&gt;</code>, something like delete the second <code>&lt;&gt;</code></p>"},{"location":"dev_notes/#til-bash-change-date-format-in-bash-17sep23","title":"TIL - Bash: Change date format in bash                            - 17/Sep/23","text":"<p>TLDR - <code>date -j -f '%d/%b/%y' $INPUT_DATE +%Y-%m-%d</code></p> <ul> <li><code>-f</code> takes <code>strftime</code> format string, <code>man strftime</code><ul> <li>turns out python <code>datetime.strftime</code> also uses the exact same format   string, because python internally uses standard c library's <code>strftime</code></li> </ul> </li> <li><code>+%Y-%m-%d</code> is the output format</li> <li><code>-j</code> do not try to set the date, this allows the usage of <code>-f</code> and <code>+</code> to   convert one date format to another</li> </ul>"},{"location":"dev_notes/#til-vim-how-to-print-manual-page-in-color-17sep23","title":"TIL - Vim: How to print manual page in color                      - 17/Sep/23","text":"<ol> <li>Use <code>Vim</code> with <code>:Man</code>, you will need <code>runtime ftplugin/man.vim</code></li> <li>open man page with <code>:Man date</code></li> <li>In zshrc <code>export MANWIDTH=80</code>, this sets the width to 80 so that the man    page can fit in one page with correct paragraph indent</li> <li><code>:TOhtml</code> (P.S. I have my own <code>:TOPrintHtml</code>)</li> <li>then open with web browser and print</li> </ol>"},{"location":"dev_notes/#til-python-get-celery-ran-tasks-27sep23","title":"TIL - Python: Get celery ran tasks                                - 27/Sep/23","text":"<pre><code>from django_celery_results.models import TaskResult\nfrom pprint import pprint\n\n# get tasks by recency\ntask_result = TaskResult.objects.order_by('-date_created')[:5]\nfor i in task_result:\n    pprint(vars(i))\n\n# get failed tasks\ntask_result = TaskResult.objects.filter(status='FAILURE').order_by('date_done')[:10]\nfor i in task_result:\n    pprint(vars(i))\n</code></pre>"},{"location":"dev_notes/#til-bash-man-page-vs-books-29sep23","title":"TIL - Bash: Man Page v.s. Books                                   - 29/Sep/23","text":"<p>Manual page, such as <code>man awk</code>, is a good reference manual, but reading it is not a good way of learning, to learn, a beginner book from O'Reilly is much better.</p>"},{"location":"dev_notes/#til-bash-cups-and-epson-et-2810-printer-30sep23","title":"TIL - Bash: CUPS and Epson ET-2810 Printer                        - 30/Sep/23","text":"<p>TL;DR: <code>lpr -p -o EPIJ_Silt=1 -o Resolution=720x720dpi -o EPIJ_Qual=307 ./lpoptoins.pdf</code></p> <p>Use <code>lpoptions -l</code> to show custom options for printer, such as <code>EPIJ_Qual/Print Quality: 308 311 *303 309 304 305 306 307</code>.</p> <p>Note that only <code>EPIJ_Qual</code> is used in printing option e.g. <code>lpr -o EPIJ_Qual=308</code>, the text after <code>/</code> is an short description of the option.</p> <p>Example output of <code>lpoptions -l</code></p> <pre><code>$ lpoptions -l\n...\nEPIJ_Ink_/Grayscale: *1 0\nEPIJ_Qual/Print Quality: 308 311 *303 309 304 305 306 307\nColorModel/ColorModel: *RGB Mono\nResolution/Resolution: 180x180dpi *360x360dpi 720x720dpi\nPageSize/Media Size: *A4 EPKG EPKG.NMgn EPPhotoPaper2L A6 A5 B5 B6 EPPhotoPaperLRoll EPPhotoPaperLRoll.NMgn EPIndexCard5x8 EP8x10in EPHiVision102x180 EPHiVision102x180.NMgn EPPostcard100x148 EPPostcard100x148.NMgn Env10 EnvDL EnvC6 Letter EP216x330mm EPIndianLegal Legal EP16K195x270mm Custom.WIDTHxHEIGHT\nEPIJ_Silt/Quiet Mode: *0 1\n...\n</code></pre> <p>upzip <code>/Library/Printers/PPDs/Contents/Resources/EPSON\\ ET-2810\\ Series.gz</code> to <code>~/Documents/downloads/</code> read the mearning of options.</p> <p>Run the following command in the unzipped <code>downloads</code> folder <pre><code>$ cat EPSON\\ ET-2820\\ Series | grep Qua\n...\n*EPIJ_Qual 308/Draft: \"\"\n*EPIJ_Qual 311/Draft-Vivid : \"\"\n*EPIJ_Qual 303/Normal: \"\"\n*EPIJ_Qual 309/Normal-Vivid: \"\"\n*EPIJ_Qual 304/Fine: \"\"\n*EPIJ_Qual 305/Quality: \"\"\n*EPIJ_Qual 306/High Quality: \"\"\n*EPIJ_Qual 307/Best Quality: \"\"\n...\n</code></pre></p> <p>Other Useful Links: </p> <ul> <li>local Cups link: http://localhost:631/<ul> <li>logins with laptops's username and password</li> </ul> </li> <li><code>/private/etc/cups/ppd</code><ul> <li>printer ppd file - Postscript Printer Description file is a file that describes the font s, paper sizes, resolution , and other capabilities that are standard for a particular Postscript printer</li> </ul> </li> </ul>"},{"location":"dev_notes/#til-bash-search-source-code-in-certain-directories-only-01oct23","title":"TIL - Bash: Search source code in certain directories only        - 01/Oct/23","text":"<p>Question: How to exclude *.tsx, migrations files, and python tests files?</p>"},{"location":"dev_notes/#in-git-grep","title":"In git grep","text":"<pre><code>git grep 'tiger' -- '*.py' ':!*tests*' ':!*migrations*'\n# same as \ngit grep 'tiger' -- '*.py' ':(exclude)*tests*' ':(exclude)*migrations*'\n</code></pre> <p>After the <code>--</code> the patterns used are <code>&lt;pathspec&gt;</code>, see <code>man gitglossary</code>.</p>"},{"location":"dev_notes/#in-rg","title":"In Rg","text":"<pre><code>rg 'tiger' --glob '!{**/tests/*,**/migrations/*}'\n\n# if you are sure there are no files with name `tests` or `migations`, you\n# can do\nrg 'tiger' --glob '!{tests,migrations}'\n\nrg 'tiger' -g '!tests' -g '!migrations'\n</code></pre>"},{"location":"dev_notes/#til-bash-shell-builtin-commands-and-busybox-01oct23","title":"TIL - Bash: Shell builtin commands and Busybox                    - 01/Oct/23","text":"<p>Certain shell commands are builtin to <code>zsh</code>, others are exposed in PATH. <code>echo</code> is a shell built-in command <code>cat</code> is exposed in PATH.</p> <pre><code>$ which echo\necho: shell built-in command\n\n$ which cat\n/bin/cat\n</code></pre>"},{"location":"dev_notes/#what-is-busybox","title":"What is BusyBox?","text":"<p>BusyBox combines tiny versions of many common UNIX utilities into a single small executable.  It provides minimalist replacements for most of the utilities you usually find in bzip2, coreutils, dhcp, diffutils, e2fsprogs, file, findutils, gawk, grep, inetutils, less, modutils, net-tools, procps, sed, shadow, sysklogd, sysvinit, tar, util-linux, and vim.  The utilities in BusyBox often have fewer options than their full-featured cousins; however, the options that are included provide the expected functionality and behave very much like their larger counterparts.</p> <p>BusyBox seems useful to</p> <ol> <li>read the C Implementation of the shell utilities</li> <li>use as sandbox as a simpler environment compared in MacOS</li> </ol>"},{"location":"dev_notes/#implementation-of-shell-command-cat-in-c","title":"Implementation of shell command <code>cat</code> in <code>C</code>","text":"<p>https://github.com/mirror/busybox/blob/master/coreutils/cat.c</p>"},{"location":"dev_notes/#play-with-busybox","title":"Play with busybox","text":"<p><code>docker run -it --rm busybox</code></p> <pre><code>/bin # ls -l | wc -l\n406\n</code></pre> <p>There are 406 utilities in busybox /bin, whereas MacOS has 980 in <code>/usr/bin</code>.</p>"},{"location":"dev_notes/#til-bash-bash-find-out-the-size-of-current-directory-03oct23","title":"TIL - Bash: bash find out the size of current directory           - 03/Oct/23","text":"<p><code>du -d 1 -h | sort --human-numeric-sort --reverse | head</code></p> <p>worth noting that</p> <ul> <li>sort has this option <code>--human-numeric-sort</code> specifically for human output   i.e. <code>du -h</code></li> </ul>"},{"location":"dev_notes/#til-misc-authentication-vs-authorization-05oct23","title":"TIL - Misc: Authentication vs Authorization                       - 05/Oct/23","text":"<p>Authentication is the process of verifying that \"you are who you say you are\"</p> <p>Authorization is the process of verifying that \"you are permitted to do what you are trying to do\"</p>"},{"location":"dev_notes/#til-vim-vim-extract-table-of-content-07oct23","title":"TIL - Vim: Vim Extract Table of Content                           - 07/Oct/23","text":"<pre><code>ZSHMISC(1)                   General Commands Manual                  ZSHMISC(1)\nNAME\n       zshmisc - everything and then some\nSIMPLE COMMANDS &amp; PIPELINES\n       A simple command is a sequence of optional parameter assignments followed\n       ...\nPRECOMMAND MODIFIERS\n       A simple command may be preceded by a precommand modifier, which will\n       ...\n</code></pre> <p>I would like the extract a Table of Content from manual page such as below</p> <pre><code>SIMPLE COMMANDS &amp; PIPELINES\nPRECOMMAND MODIFIERS\n</code></pre> <ol> <li><code>:redir @a</code>  - setup redirect to register <code>a</code></li> <li><code>:g/^\\u.*/p</code> - find all lines start with upper case and print them </li> <li><code>:redir END</code> - end the redirection</li> <li><code>\"ap</code>        - paste content in register a </li> </ol>"},{"location":"dev_notes/#til-python-find-the-dependencies-of-python-package-19oct23","title":"TIL - Python: Find the dependencies of python package             - 19/Oct/23","text":"<p>Two ways</p> <ol> <li>Go into a shell with the dependencies installed</li> </ol> <p><pre><code>In [1]:  from importlib.metadata import requires\n\nIn [2]: requires('Django')\nOut[2]:\n['asgiref (&lt;4,&gt;=3.3.2)',\n 'pytz',\n 'sqlparse (&gt;=0.2.2)',\n \"argon2-cffi (&gt;=19.1.0) ; extra == 'argon2'\",\n \"bcrypt ; extra == 'bcrypt'\"]\n ```\n\n 2. Read the poetry.lock file \n</code></pre> [[package]] name = \"django\" version = \"3.2.20\" description = \"A high-level Python Web framework that encourages rapid development and clean, pragmatic design.\" optional = false python-versions = \"&gt;=3.6\" files = [     {file = \"Django-3.2.20-py3-none-any.whl\", hash = \"sha256:a477ab326ae7d8807dc25c186b951ab8c7648a3a23f9497763c37307a2b5ef87\"},     {file = \"Django-3.2.20.tar.gz\", hash = \"sha256:dec2a116787b8e14962014bf78e120bba454135108e1af9e9b91ade7b2964c40\"}, ]</p> <p>[package.dependencies] asgiref = \"&gt;=3.3.2,&lt;4\" pytz = \"*\" sqlparse = \"&gt;=0.2.2\"</p> <p>[package.extras] argon2 = [\"argon2-cffi (&gt;=19.1.0)\"] bcrypt = [\"bcrypt\"] <pre><code># TIL - Docker: 137 exit code                                       - 16/Aug/23\n\nTLDR: Exit code 137 is caused by `oneview-django-1` container exited\n\n1. mostly likely caused by migration file in the PR conflicting with migration\n   files in master branch.\n2. if there is no migration, it could be some other error causing\n   `oneview-django-1` exits,\n   such as `TypeError: check_permissions() got an  unexpected keyword argument 'groups'`\n\n&lt;img width=\"388\" alt=\"Screenshot 2023-08-16 at 18 26 41\" src=\"https://github.com/Saltus-Partners/oneview/assets/13963732/7e36c2b5-5782-4eb8-9ee2-c147c489cb61\"&gt;\n\n**First of all, Exit code 137 doesn't necessarily mean out of memory issue.**\n\nBased on [Advanced Bash-Scripting Guide Exit Code](https://tldp.org/LDP/abs/html/exitcodes.html), in the example of 128 + n , 137 exit code means a process receives Fatal Error Signal 9, i.e. `kill -9`, from `man kill`, kill with signal 9 is `KILL (non-catchable, non-ignorable kill)`.\n\n**The actual reason of exit code 137**\n\nThis PR, contains the minimal changes to demonstrate/reproduce the exit code 137, the changes are\n1. added migration file\n2. in github action, use `sleep 999`  to replace other actions such as install dev dependencies, lint, tests ...\n\nIn the github action, we use [actions/checkout@v3](https://github.com/actions/checkout), which under the hood, checkout a **merge** PR with `origin/master` branch.\n\nIn this PR, we have a migration file `0185_task_retain_regarding.py`, and in master branch we have additional migration files `0185_auto_20230814_1357.py` and `0186_providercontact_status.py`, because github action checkout creates the merge PR, then in the github action running environment, we have all three of these migration files. \n\nBecause of these conflicting migrations files, the `oneview-django-1` container constantly exits with error `CommandError: Conflicting migrations detected; multiple leaf nodes in the migration graph: (0185_task_retain_regarding, 0186_providercontact_status in oneview).` \n\n&lt;img width=\"1530\" alt=\"Screenshot 2023-08-16 at 18 20 21\" src=\"https://github.com/Saltus-Partners/oneview/assets/13963732/3e448c9e-dfe0-4cfe-8fb9-6129fce8d859\"&gt;\n\nThen in the bash sleep step `docker compose --file docker-compose-dev.yml exec django sleep 999`,\nthe `/bin/sleep` is running within the container, but the container gets killed, then this sleep process exited with 137.\n\nTo confirm the above finding is correct, I managed to reproduce the exit code 137 locally. \nTo reproduce,  you can run `make run-be` in the first terminal window, and run `make bash` in the second terminal window, then you quick input 3 &lt;ctrl-c&gt; in the first terminal to force kill the oneview-django-1 container, the container will get a `SIGKILL` i.e. `kill -9` that's why the process exited with exit code 137.\n\n&lt;img width=\"733\" alt=\"Screenshot 2023-08-16 at 18 14 50\" src=\"https://github.com/Saltus-Partners/oneview/assets/13963732/edf8bb12-3814-4066-bbb5-d1dc8b84561c\"&gt;\n\n**Bonus Issues While investigating**\n\nthe celery container is constantly exiting too... something we might need to fix in the future, though our tests don't rely on celery \n\n&lt;img width=\"819\" alt=\"Screenshot 2023-08-16 at 18 20 46\" src=\"https://github.com/Saltus-Partners/oneview/assets/13963732/50dec62f-5b5d-469d-a532-c5676f627f03\"&gt;\n\n# TIL - Saltus: How does tech project get prioritised in Saltus?    - 31/Aug/23\n\nTech-co holds a bi-monthly meeting to talk about all projects and Ashley acts as\na referer to prioritise the projects.\n\nFew criterias are considered for priortisation.\n\n- how easy to do, whether it helps lot of people\n- compliance\n- cash\n- efficiency\n\nEpic becomes important to align with tech-co project.\n\nCreations of dev tickets\n\n1. Post Implementation Checks\n2. Tech-co meetting (bi-monthly)\n3. Developers Architecting and Spikings \n3. Jira Tickets\n\n# TIL - Saltus: What are the responsibilities of BA in Saltus?      - 31/Aug/23\n\n- define businesse objectives and problem statements\n  by working interatively with devs\n- (optionally) work with devs on tech architecture\n- help with kanban\n- QA testing the final tech product\n\n# TIL - Python: fileobj vs string vs byte string                    - 23/Jan/24\n\n- string - 'abc' - a sequence of Unicode characters\n- byte string - b'abc' - a sequence of octets (integers between 0 and 255)\n- fileobj - BytesIO('abc') or BytesIO(b'abc') - an file like object that\n  implements `.read()`\n\n# TIL - Python: Profiling in iPython                                - 06/May/24\n\n## ``%%prun -r` returns profiling object\n\n```python\n%%prun -D stats\n\nfrom oneview.models.helpers.imports import pull_accounts_no_threaded\npull_accounts_no_threaded()\n</code></pre></p> <pre><code>import pstats\nfrom pstats import SortKey\n\nstats = pstats.Stats('stats')\n\n# `tottime` for the total time spent in the given function (and excluding time\n# made in calls to sub-functions)\nstats.sort_stats('tottime').print_stats(50)\nstats.sort_stats('cumtime').print_stats(50)\nstats.sort_stats('filename').print_stats(50)\n</code></pre>"},{"location":"dev_notes/#alternatively-just-timeit-once","title":"Alternatively, Just timeit once","text":"<pre><code>%%timeit -n 1 -r 1\n\nfrom oneview.models.helpers.imports import pull_accounts, pull_accounts_no_threaded\npull_accounts()\n</code></pre> <p>See also - pstat sort keys - %prun documentation - %timeit documentation</p>"},{"location":"dev_notes/#til-fish-right-alt-v-to-open-vim-to-edit-command-line-09may24","title":"TIL - Fish: right Alt-v to open vim to edit command line          - 09/May/24","text":"<p>Notes for the future:</p> <p>to have <code>alt-v</code> works I need to set the right <code>alt</code> key to be <code>Esc+</code> in iTerm2</p> <p>Q: How do I make the option/alt key act like Meta or send escape codes? A: Go to Preferences &gt; Profiles tab. Select your profile on the left, and then open the Keyboard tab. At the bottom is a set of buttons that lets you select the behavior of the Option key. For most users, Esc+ will be the best choice.</p> <p>from https://iterm2.com/faq.html</p>"},{"location":"dev_notes/#til-django-inheritance-14may24","title":"TIL - Django: inheritance..                                       - 14/May/24","text":"<p>Django likes subclassing existing class.</p> <p>RelatedManager subclasses Manager to get all method from managers.</p> <p>Create a manager for the reverse side of a many-to-one relation.</p> <p>This manager subclasses another manager, generally the default manager of    the related model, and adds behaviors specific to many-to-one relations.</p> <p>https://github.com/django/django/blob/a09082a9bec18f8e3ee8c10d473013ec67ffe93b/django/db/models/fields/related_descriptors.py#L675C5-L675C45</p> <p>Manager is a subclass of QuerySet so that manager has all the methods of QuerySet.</p> <p>class Manager(BaseManager.from_queryset(QuerySet)):    pass</p> <p>https://github.com/django/django/blob/f030236a86a64a4befd3cc8093e2bbeceef52a31/django/db/models/manager.py#L176</p>"},{"location":"dev_notes/#til-vim-experimenting-python-vim-module-03jun24","title":"TIL - vim: experimenting python vim module                        - 03/Jun/24","text":"<p>Quickly </p> <pre><code>:py3 print('abc')\n\n# to change lines in range\n:'&lt;,'&gt;py3do return line.split(\":\")[0] + ' = ' + line.split(\":\")[0].strip() + ','\n\n# run foo.py in current directory, have access to all vim_python objects\n# see `:help python-command`\n:pyfile foo.py\n\n# For example\n#\n# &gt; cat foo.py\n# vim.command('buffers a')\n# for b in vim.buffers:\n#     print(b)\n#     print(b.__dir__())\n#     print(b.valid)\n# visible_buffers = [window.buffer for window in vim.current.tabpage.windows]\n</code></pre>"},{"location":"dev_notes/#til-python-requests-library-possible-errors-06jun24","title":"TIL - Python: requests library possible errors                    - 06/Jun/24","text":"error type safe to retry examples of when error occurs HTTPError - 4xx No client error, e.g., calling the api incorrectly HTTPError - 5xx No server error, e.g. bugs in server code Connection Error Maybe incorrect configurations or unavailble network Connection Timeout Yes network congestion, server too busy to responds, server being offline Request Timeout Maybe ?? Requests library Exception No data passed in cannot be converted to json Other Python Exception No any python errors <p>Note that Request Timeout means The server did not send any data in the allotted amount of time in <code>Requests</code> library.</p> <p>https://requests.readthedocs.io/en/latest/api/#requests.ReadTimeout</p>"},{"location":"dev_notes/#see-also_1","title":"See also","text":"<p>https://requests.readthedocs.io/en/latest/api/#exceptions</p>"},{"location":"dev_notes/#til-python-search-in-a-python-function-21jun24","title":"TIL - Python: search in a python function                         - 21/Jun/24","text":"<p>generalised to search within visual selected region</p> <ol> <li>visual select a function <code>vaf</code></li> <li>exit the visual mode</li> <li><code>/\\%Vfoo</code> to seach in the last visual region (see <code>:help /\\%V</code>)</li> </ol>"},{"location":"dev_notes/#til-python-run-black-or-flake8-on-python-code-in-markdown-21jun24","title":"TIL - Python: run black or flake8 on python code in markdown      - 21/Jun/24","text":"<p>generalised to any files</p> <ol> <li><code>vic</code> visual select lines of python codes in markdown code block</li> <li><code>:'&lt;,'&gt;!black -q -</code> to replace the visually selected lines with the formatted    standard output of the external <code>black</code> command (see <code>:help filter</code>)</li> <li><code>:'&lt;,'&gt;w !flake8 -</code> to use <code>w</code> to echo flake8's output instead of replacing    visually selected lines (see <code>:help :w_c</code>)</li> </ol> <p>Alternatively, I can open the output in a split</p> <ol> <li><code>:'&lt;,'&gt;w !flake8 - &gt; quickfix.vim</code> to pipe the output into <code>quickfix.vim</code></li> <li><code>&lt;leader&gt;el</code> </li> </ol>"},{"location":"dev_notes/#til-vim-registers-macros-21jun24","title":"TIL - Vim: Registers &amp; Macros                                     - 21/Jun/24","text":"<ul> <li><code>\"kp</code> - paste from register k</li> <li><code>\"Kyy</code> - append to register k by using capital register letter <code>K</code></li> <li> <p><code>\"0p</code> - paste from last yanked test</p> </li> <li> <p><code>qk</code> - start to record macro in register <code>k</code></p> </li> <li><code>[count]@k</code> - apply macro in register <code>k</code>, [count] number of times</li> <li><code>@@</code> - apply last macro</li> </ul>"},{"location":"dev_notes/#til-vim-apply-changes-to-lines-match-a-pattern-21jun24","title":"TIL - Vim: apply changes to lines match a pattern                 - 21/Jun/24","text":"<ul> <li><code>:g/foo/d</code> - delete lines with pattern foo in this file, <code>d</code> is the   abbreviation of <code>:delete</code> command</li> <li><code>:g/foo/normal Q</code> - apply macro on lines with pattern foo in this file</li> </ul>"},{"location":"dev_notes/#til-vim-vimeval-in-python-vim-21jun24","title":"TIL - Vim: vim.eval in python vim                                 - 21/Jun/24","text":"<pre><code>def get_import_path_given_word(vim: object) -&gt; str | None:\n    word = vim.eval('expand(\"&lt;cword&gt;\")')\n\n    for package, words in package_and_word.items():\n        if word in words:\n            import_string = f\"from {package} import {word}\"\n            print(import_string)\n            return import_string\n</code></pre> <p>This function above is used in <code>vim_python.py</code> imported into vim.</p> <p>The <code>vim.eval</code> literally runs the string passed in as vim code and export the vim object into python object</p> <p>For example, the following two vim commands are equivalent.</p> <p><pre><code>:py3 print(vim.eval('expand(\"&lt;cword&gt;\")'))\n:echom expand(\"&lt;cword&gt;\")\n</code></pre> See also <code>:help if_pyth.txt</code></p>"},{"location":"dev_notes/#til-vim-regex-look-ahead-behind-27jun24","title":"TIL - Vim: regex look ahead / behind                              - 27/Jun/24","text":""},{"location":"dev_notes/#find-expression-a-where-expression-b-follows","title":"Find expression A where expression B follows","text":"<p><code>\\@=</code> e.g. <code>\\A\\(B\\)\\@=</code></p> <p>might be easier to use <code>\\ze</code></p>"},{"location":"dev_notes/#find-expression-a-where-expression-b-does-not-follow","title":"Find expression A where expression B does not follow","text":"<p><code>\\@!</code> e.g. <code>A\\(B\\)\\@!</code></p>"},{"location":"dev_notes/#find-expression-a-where-expression-b-is-behind","title":"Find expression A where expression B is behind:","text":"<p><code>\\@&lt;=</code> e.g. <code>\\(B\\)\\@&lt;=A</code></p> <p>might be easier to use <code>\\zs</code></p>"},{"location":"dev_notes/#find-expression-a-where-expression-b-is-not-behind","title":"Find expression A where expression B is not behind:","text":"<p><code>\\@&lt;!</code> e.g. <code>\\(B\\)\\@&lt;!A</code></p>"},{"location":"dev_notes/#for-example","title":"For example","text":"<p>\"\"\" foo( def foo( \"\"\"</p> <p>to match only function definitions, e.g. the <code>foo</code> after def</p> <p><code>\\(def[ ]\\)\\@&lt;=foo(</code></p> <p>to match function usage e.g. the <code>foo</code> not after <code>def</code></p> <p><code>\\(def[ ]\\)\\@&lt;!foo(</code></p> <p>\"\"\" foobar foobaz \"\"\"</p> <p><code>foo\\(bar\\)\\@=</code> - matches foo that follows with bar e.g. matches first <code>foo\\(bar\\)\\@!</code> - matches foo that not follows with bar e.g. matches second</p>"},{"location":"dev_notes/#til-oneview-graphiql-django-debug-tool-bar-28jun24","title":"TIL - Oneview: GraphIQL + Django Debug Tool Bar                   - 28/Jun/24","text":"<ol> <li>login to <code>http://localhost:8000/admin/</code></li> <li>go to <code>http://localhost:8000/graphql/</code></li> <li>copy paste both the graphql query and graphql variable from the graphql    request plugin</li> <li>run the added query in graphiql</li> <li>look at the django debug toolbar</li> </ol>"},{"location":"dev_notes/#til-git-rebase-09sep24","title":"TIL - Git Rebase                                                  - 09/Sep/24","text":"<ul> <li><code>git rebase -X ours -i origin/development</code><ul> <li>on merge conflicts, use origin/development</li> </ul> </li> <li><code>git rebase -X theirs -i origin/development</code><ul> <li>on merge conflicts, use my branch</li> </ul> </li> </ul>"},{"location":"dev_notes/#til-quick-start-guide-for-pdb-debugging-20sep24","title":"TIL - quick start guide for pdb debugging                         - 20/Sep/24","text":""},{"location":"dev_notes/#debugging-after-ssh-into-uat","title":"Debugging after ssh into uat","text":"<p>Prerequisite</p> <p>Go into the ipython shell e.g. <code>sudo docker exec -it oneview-django poetry run python manage.py shell</code></p> <pre><code>In [1]: from oneview.graphql.api.charge import one_fee_calculator\n\nIn [2]: review_id = \"73a07db5-7214-4ead-a9b8-4906e1727a8c\"\n\nIn [3]: import pdb\n        pdb.runcall(one_fee_calculator, review_id)\n[1] &gt; /app/backend/oneview/graphql/api/charge.py(248)one_fee_calculator()\n-&gt; review = Review.objects.get(id=review_id)\n</code></pre> <p>If you do the above, you will be dropped into the pdb debugging shell.</p> <p>Note: please be careful about possible side effects if the functions called especially if you are doing this in uat or even prod environment.</p>"},{"location":"dev_notes/#pdb","title":"pdb","text":"<p>pdb is an interactive source code debugger for Python programs.</p> <p>pdb is very powerful, though you need to get familiar with the commands</p> <p>You can find the pdb commands doc  here</p> <p>Most useful commands I find are</p> <ul> <li><code>ll</code> - print all source code for the current function or frame</li> <li><code>b</code> - breakpoint, you can set breakpoint like so <code>b oneview/graphql/api/charge.py:254</code></li> <li><code>c</code> - continue, continue until breakpoint</li> <li><code>n</code> - next, continue execution until the next line</li> <li><code>s</code> - step, step inside a function</li> <li><code>sticky</code> - show whole function while you are debugging, make pdb very much   like debugging with GUI</li> </ul>"},{"location":"dev_notes/#til-event-driven-vs-event-based-architecture-18oct24","title":"TIL - Event Driven v.s. Event Based Architecture                  - 18/Oct/24","text":""},{"location":"dev_notes/#event-driven","title":"Event Driven","text":"<p>A key feature of true event-driven architectures is that the producers and consumers are completely decoupled -- a producer shouldn't know or care who is consuming its events and how the consumers use those events in their service..</p> <p>Examples</p> <ul> <li>Kafka + Kubernetes</li> <li>IoT + MQTT pub/sub</li> </ul>"},{"location":"dev_notes/#event-based","title":"Event-based","text":"<p>Two key characteristics of event-based compute</p> <ol> <li>the existence of a compute instance is intimately tied to the occurence of an event to be processed.</li> <li>the compute acts on a single event at a time.</li> </ol> <p>Examples</p> <ul> <li>API Gateway + Lambda</li> </ul> <p>See also https://www.alexdebrie.com/posts/event-driven-vs-event-based/</p>"},{"location":"dev_notes/#til-using-urllib-instead-of-requests-library-for-posting-json-25oct24","title":"TIL - using urllib instead of requests library for posting json   - 25/Oct/24","text":"<pre><code>json_as_bytes = json.dumps(payload).encode(\"utf-8\")\nrequest_object = request.Request(self.api_url, data=json_as_bytes)\nrequest_object.add_header(\"Content-Type\", \"application/json\")\nrequest_object.add_header(\"Authorization\", f\"Bearer {self.token}\")\ntry:\n    with request.urlopen(request_object) as response:\n        res_json = json.loads(response.read())\nexcept HTTPError as e:\n    _logger.exception(e.code)\n    _logger.exception(e.read())\n    raise e\n</code></pre> <p>See Also: https://docs.python.org/3.12/howto/urllib2.html</p>"},{"location":"digital-garden/","title":"Digital Garden","text":""},{"location":"digital-garden/#tldr","title":"TL;DR","text":"<p>Digital garden are forever work in progress/developing personal notes.</p>"},{"location":"digital-garden/#what-is-digital-garden","title":"What is digital garden?","text":"<p>A brief history</p> <ul> <li>Every note is always work in progress</li> <li>Every note is by default public on day 1, similar to the idea open source by default</li> </ul>"},{"location":"digital-garden/#why-do-i-write-these-notes","title":"Why do I write these notes?","text":"<ul> <li>practise writing</li> <li>build the habit of writing</li> <li>record my random thoughts</li> </ul> <p>George Orwell gives the following four reasons on why every writer writes.</p> <p>Sheer Egoism</p> <p>This is very true for me, when I was in primary school, Chinese and English are my worst subjects. I might just want to show that I can write and I can speak English.</p> <p>Aesthetic Enthusiasm</p> <p>Good writings are just beautiful.</p> <p>Historical Impulse</p> <p>These notes record my random ideas, for whatever reason, my brain is running most of the time, new ideas constantly pop up in my head, just want to write them down.</p> <p>Political Purpose</p> <p>using the word \u2018political\u2019 in the widest possible sense. Desire to push the world in a certain direction, to alter other people\u2019s idea of the kind of society that they should strive after. Once again, no book is genuinely free from political bias. The opinion that art should have nothing to do with politics is itself a political attitude. -- George Orwell</p>"},{"location":"digital-garden/#remind-myself-the-following-when-writing","title":"Remind myself the following when writing","text":"<p>A scrupulous writer, in every sentence that he writes, will ask himself at least four questions, thus: What am I trying to say? What words will express it? What image or idiom will make it clearer? Is this image fresh enough to have an effect? And he will probably ask himself two more: Could I put it more shortly? Have I said anything that is avoidable ugly?</p> <ol> <li>Never use a metaphor, simile or other figure of speech which you are used to seeing in print.</li> <li>Never use a long word where a short one will do.</li> <li>If it is possible to cut a word out, always cut it out.</li> <li>Never use the passive where you can use the active.</li> <li>Never use a foreign phrase, a scientific word or a jargon word if you can think of an everyday English equivalent.</li> <li>Break any of these rules sooner than say anything outright barbarous.</li> </ol> <p>-- Politics and the English Language, George Orwell</p> <ul> <li>Do not be afraid to write down raw thoughts, because I can always develop it later</li> </ul>"},{"location":"digital-garden/#site-infrastructure","title":"Site Infrastructure","text":"<p>These html pages are all markdown files in Github Repository. By using MkDocs, <code>mkdocs gh-deploy</code> publishes to Github page.</p> <p>I value the simplicity of this setup.</p> <p>Because I have been writing code in Vim for years and I recently got used to writing documentations in Vim, so writing these notes in Vim feels easy and natural to me. I don't need any mental transition to write notes.</p>"},{"location":"minimalism/","title":"Minimalism","text":""},{"location":"minimalism/#how-do-i-become-a-minimalist","title":"How do I become a minimalist?","text":"<p>I become a minimalist after reading The Life-Changing Magic of Tidying and watching Japanese tv series which describes a more extreme form of minimalism...</p>"},{"location":"minimalism/#on-processions","title":"On Processions","text":"<p>I own a small amount of things, more importantly, all of them are my favourites. This leads to me being constantly happy and satisfied with my living spaces.</p> <p>Because of the small amount of things, I have a designated place for each item.  This is quite useful because it makes my home easy to clean and to find things.</p> <p>Some people shop to reduce stress, I don't have much desire to obtain more things, so instead, I reduce stress to throwing things away.</p> <p>Because I don't have the urge to buy things, I have a large proportion of my salary leftover every month, then I learned about FIRE, see below.</p>"},{"location":"minimalism/#on-finance","title":"On Finance","text":"<p>Minimalism is also anti-consumerism, this enables me to start the journey of Financial Independence, Retire Early.</p> <p>Financial Independence, Retire Early (FIRE) is a movement of people devoted to a program of extreme savings and investment that aims to allow them to retire far earlier than traditional budgets and retirement plans would permit. -- investopedia</p> <p>Applications of minimalism in investing:</p> <ul> <li>automatic investment using direct debit</li> <li>minimalistic portfolio consists of two funds</li> </ul>"},{"location":"minimalism/#on-household-cleaning","title":"On household cleaning","text":"<p>It makes cleaning easier because</p> <ol> <li>My living room is almost empty so mopping the floor is easy</li> <li>When cleaning bathroom, I can first put away every things in the bathroom surfaces.</li> </ol>"},{"location":"minimalism/#on-how-to-live-my-life","title":"On how to live my life","text":"<ul> <li>Don't have social media</li> </ul>"},{"location":"minimalism/#my-minimalism-ideals","title":"My Minimalism Ideals","text":"<p>Living Room</p> <p>Just a sofa &amp; a table</p> <p>Bed Room</p> <p>Just one bed and a wardrobe</p>"},{"location":"minimalism/#quotes-from-friends","title":"Quotes from friends","text":"<p>Your flat looks like a sample flat.</p> <p>Your bathroom feels like the one in hotels.</p>"},{"location":"minimalism/#see-also","title":"See also","text":"<ul> <li>My presentation on minimalism</li> </ul>"},{"location":"recommendations/","title":"Restaurant Recommendations","text":""},{"location":"recommendations/#london-uk","title":"London - UK","text":"<p>Restaurant</p> <ul> <li>Papa Noodle \u725b\u5927\u5927<ul> <li>authentic Chinese north-eastern Noodle</li> </ul> </li> <li>House Of MoMo<ul> <li>Nepalese cuisine</li> </ul> </li> <li>Roti King Battersea<ul> <li>best Roti</li> </ul> </li> <li>Hoppers<ul> <li>best hopper and rosa</li> </ul> </li> <li>Franco Manca<ul> <li>Pizza No.5</li> </ul> </li> <li>Notto<ul> <li>best pasta</li> </ul> </li> <li>Miga<ul> <li>best Korean</li> </ul> </li> <li>Cafe East Pho<ul> <li>best Vietnamese</li> </ul> </li> <li>Sanbubai Chuan Chuan<ul> <li>\u5192\u83dc</li> </ul> </li> <li>Dirty Bones<ul> <li>best burger</li> </ul> </li> </ul> <p>Coffee </p> <ul> <li>Omotesando Koffee<ul> <li>good hand drip coffee </li> </ul> </li> <li>Ozone Coffee<ul> <li>best filter coffee and brunch</li> </ul> </li> <li>Allpress Cafe<ul> <li>good Espresso Based Coffee</li> </ul> </li> <li>Rosslyn Cafe<ul> <li>good Espresso Based Coffee</li> </ul> </li> </ul>"},{"location":"recommendations/#st-ives-uk","title":"St Ives - UK","text":"<ul> <li>Pengenna Pasties<ul> <li>best cream tea</li> </ul> </li> <li>Curve Coffee Roasters<ul> <li>good filter coffee</li> </ul> </li> </ul>"},{"location":"recommendations/#istanbul-turkey","title":"Istanbul - Turkey","text":"<ul> <li>Tarihi Sultanahmet K\u00f6ftecisi Selim Usta<ul> <li>best Kofte</li> </ul> </li> </ul>"},{"location":"recommendations/#athens-greece","title":"Athens - Greece","text":"<ul> <li>Oinomageireio Epirus (est. 1898)<ul> <li>greek traditional homemade soup</li> </ul> </li> <li>AXiZaoDian \u554a\u9521\u65e9\u70b9<ul> <li>best traditional Chinese noodle in Europe</li> </ul> </li> </ul>"},{"location":"recommendations/#paris-france","title":"Paris - France","text":"<ul> <li>Bolo Bolo<ul> <li>best honkoongness \u8336\u9910\u5385</li> </ul> </li> <li>C' Est Comme \u00c0 La Maison - CCALM<ul> <li>best french</li> </ul> </li> <li>Sweet Ravioli <ul> <li>best jiaozi</li> </ul> </li> <li>Restaurant 7 Nouilles<ul> <li>best fried chicken and good noodles</li> </ul> </li> <li>Best Tofu<ul> <li>best \u8c46\u8150\u8111</li> </ul> </li> <li>Carr\u00e9 Pain de Mie<ul> <li>best \u9762\u5305</li> </ul> </li> <li> <p>pho 14</p> <ul> <li>best pho</li> </ul> </li> <li> <p>lots of authentic Chinese noodles</p> </li> </ul>"},{"location":"recommendations/#books-recommendations","title":"Books Recommendations","text":"<ul> <li>Classic Shell Scripting<ul> <li>get started with bash!</li> </ul> </li> <li>Operating Systems: Three Easy Pieces<ul> <li>great overview of operating systems</li> </ul> </li> <li>A Philosophy of Software Design<ul> <li>very convincing chapters about why we should write documentations</li> </ul> </li> </ul>"},{"location":"recommendations/#london-day-trip-recommendations","title":"London Day Trip Recommendations","text":"<ul> <li>Wimbledon commons<ul> <li>mushroom picking</li> </ul> </li> <li>Epping forest<ul> <li>mushroom picking</li> </ul> </li> </ul>"},{"location":"things-needed-for-travel/","title":"Things Needed","text":""},{"location":"things-needed-for-travel/#for-going-to-office","title":"For Going To Office","text":"<p>laptop, keyboard, earphones, office key, water bottle, pen, cheatsheets, standup sheets, usbc to usbc cable, a plastic bag, optionally a book,</p>"},{"location":"things-needed-for-travel/#for-dnd","title":"For DnD","text":"<p>player's handbook, character sheet, dices, pen, paper, water bottle,</p>"},{"location":"things-needed-for-travel/#for-travel","title":"For Travel","text":"<p>phone, wallet, keys, passport, BRP, 3 sets of clothes,  2 sets of pyjamas, 4 hand tips, sleeping eyepatch cloth, sleeping back cloth, bath towel, slipper, floss, toothbrush, toothpaste, cotton butts, tissue, hand cream, lip balm, umbrella, converse bag, water bottle, book, pen, paper, earphone, universal socket adapter, iPhone charger, Android charger, glove, cotton glove, belts, sun cream (optionally), ber ber ber,</p> <p>Tepe toothbrush, waterfloss, make ups, camera, 35mm film, invisalign, invisalign cleaning capsule, contact lenses, M clothes, hair brush, face wash, usbc to usb converter, ricoh battery charger,  kindle, kindle charger, ipad, ipad charger, drawing pad,</p>"},{"location":"things-needed-for-travel/#for-working-remotely","title":"For working remotely","text":"<p>laptop, laptop charger, laptop keyboard with new battery, laptop touchpad,  coffee equipments, coffee beans, standup notes, cheatsheets</p>"},{"location":"things-needed-for-travel/#for-going-home","title":"For going home","text":"<p>shaver, shaving blade, shaving cream, coffee equipments, coffee beans, no laptop, not too much clothes, one book only, additional socket converters, additional phone, HK to Guangzhou train ticket, E-sim, </p>"},{"location":"things-needed-for-travel/#bed-setup","title":"Bed Setup","text":"<p>water, hand cream, book, cotton buds, tissue, lip balm, 2 sets of pyjamas, 4 hand tips, sleeping eyepatch cloth, sleeping back cloth,</p>"},{"location":"things-needed-for-travel/#bag-setup","title":"Bag Setup","text":"<p>sunscreen, mask, additional long sleeve cloth, tissue, two phones, umbrella, chinese identity card, water, key (optional),</p>"}]}