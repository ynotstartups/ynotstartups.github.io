{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Who am I?","text":"<p>My name is Tiger Yuhao Huang.</p> <p></p> <p>Welcome to my notes!</p> <p>Please also checkout my home menu/recipes </p> <p>I am currently working as a python backend engineer!</p> <p>My biggest passions are software engineering, home cooking, coffee brewing, reading, eating out, boardgames,  ...</p> <p>My dream is to open a cafe called \"Tou\", it sells Man Tou (Chinese steamed bun with no filling), V60 coffee and Latte.</p>"},{"location":"#meaning-of-life","title":"Meaning Of Life","text":"<p>I believe that the meaning of life is to be alive.</p> <p>I once thought the meaning of life is to enjoy every moment of life, but I don't think it is true any more because there were good days and bad days so it wasn't always possible to enjoy it.</p> <p>But being alive (please do try your best) let you experience life in both its beauty and the ugly. Life is your unique experience with the world and every choices you made.</p> <p>The meaning of life is just to be alive. It is so plain and so obvious and so simple. And yet, everybody rushes around in a great panic as if it were necessary to achieve something beyond themselves.  ---- Alan Wilson Watts</p>"},{"location":"digital-garden/","title":"About These Notes","text":""},{"location":"digital-garden/#tldr","title":"TL;DR","text":"<p>This websites contains work in progress/developing personal notes.</p> <ul> <li>Every page is always work in progress</li> <li>Every page is by default public on day 1, similar to the idea open source by default</li> </ul>"},{"location":"digital-garden/#why-do-i-write-these-notes","title":"Why do I write these notes?","text":"<ul> <li>practise writing</li> <li>build the habit of writing</li> <li>record my random thoughts</li> </ul> <p>George Orwell gives the following four reasons on why every writer writes.</p> <p>Sheer Egoism</p> <p>This is very true for me, when I was in primary school, Chinese and English are my worst subjects. I might just want to show that I can write and I can speak English.</p> <p>Aesthetic Enthusiasm</p> <p>Good writings are just beautiful.</p> <p>Historical Impulse</p> <p>These notes record my random ideas, for whatever reason, my brain is running most of the time, new ideas constantly pop up in my head, just want to write them down.</p> <p>Political Purpose</p> <p>using the word \u2018political\u2019 in the widest possible sense. Desire to push the world in a certain direction, to alter other people\u2019s idea of the kind of society that they should strive after. Once again, no book is genuinely free from political bias. The opinion that art should have nothing to do with politics is itself a political attitude. -- George Orwell</p>"},{"location":"digital-garden/#site-infrastructure","title":"Site Infrastructure","text":"<p>These html pages are all markdown files in Github Repository. By using MkDocs, <code>mkdocs gh-deploy</code> publishes to Github page.</p> <p>I value the simplicity of this setup.</p> <p>Because I have been writing code in Vim for years and I recently got used to writing documentations in Vim, so writing these notes in Vim feels easy and natural to me. I don't need any mental transition to write notes.</p>"},{"location":"minimalism/","title":"Minimalism","text":""},{"location":"minimalism/#how-do-i-become-a-minimalist","title":"How do I become a minimalist?","text":"<p>I become a minimalist after reading \"The Life-Changing Magic of Tidying\" by Marie Kondo.</p>"},{"location":"minimalism/#on-processions","title":"On Processions","text":"<p>I own a small amount of things, more importantly, all of them are my favourites. This leads to me being constantly happy and satisfied with my living spaces.</p> <p>Because of the small amount of things, I have a designated place for each item, make my home easy to clean and to find things.</p> <p>Some people shop to reduce stress, I don't have much desire to obtain more things, so instead, I reduce stress to throwing things away.</p>"},{"location":"minimalism/#see-also","title":"See also","text":"<ul> <li>My presentation on minimalism</li> </ul>"},{"location":"recommendations/","title":"Eat, Drink, Play, Happiness","text":""},{"location":"recommendations/#restaurants","title":"Restaurants","text":""},{"location":"recommendations/#london-uk","title":"London - UK","text":"<p>Restaurant</p> <ul> <li>Papa Noodle \u725b\u5927\u5927<ul> <li>authentic Chinese north-eastern Noodle</li> </ul> </li> <li>House Of MoMo<ul> <li>Nepalese cuisine</li> </ul> </li> <li>Roti King Battersea<ul> <li>best Roti</li> </ul> </li> <li>Hoppers<ul> <li>best hopper and rosa</li> </ul> </li> <li>Franco Manca<ul> <li>Pizza No.5</li> </ul> </li> <li>Notto<ul> <li>best pasta</li> </ul> </li> <li>Miga<ul> <li>best Korean</li> </ul> </li> <li>Cafe East Pho<ul> <li>best Vietnamese</li> </ul> </li> <li>Sanbubai Chuan Chuan<ul> <li>\u5192\u83dc</li> </ul> </li> <li>Dirty Bones<ul> <li>best burger</li> </ul> </li> </ul> <p>Coffee </p> <ul> <li>Omotesando Koffee<ul> <li>good hand drip coffee </li> </ul> </li> <li>Ozone Coffee<ul> <li>best filter coffee and brunch</li> </ul> </li> <li>Allpress Cafe<ul> <li>good Espresso Based Coffee</li> </ul> </li> <li>Rosslyn Cafe<ul> <li>good Espresso Based Coffee</li> </ul> </li> </ul>"},{"location":"recommendations/#st-ives-uk","title":"St Ives - UK","text":"<ul> <li>Pengenna Pasties<ul> <li>best cream tea</li> </ul> </li> <li>Curve Coffee Roasters<ul> <li>good filter coffee</li> </ul> </li> </ul>"},{"location":"recommendations/#istanbul-turkey","title":"Istanbul - Turkey","text":"<ul> <li>Tarihi Sultanahmet K\u00f6ftecisi Selim Usta<ul> <li>best Kofte</li> </ul> </li> </ul>"},{"location":"recommendations/#athens-greece","title":"Athens - Greece","text":"<ul> <li>Oinomageireio Epirus (est. 1898)<ul> <li>greek traditional homemade soup</li> </ul> </li> <li>AXiZaoDian \u554a\u9521\u65e9\u70b9<ul> <li>best traditional Chinese noodle in Europe</li> </ul> </li> </ul>"},{"location":"recommendations/#paris-france","title":"Paris - France","text":"<ul> <li>Bolo Bolo<ul> <li>best honkoongness \u8336\u9910\u5385</li> </ul> </li> <li>C' Est Comme \u00c0 La Maison - CCALM<ul> <li>best french</li> </ul> </li> <li>Sweet Ravioli <ul> <li>best jiaozi</li> </ul> </li> <li>Restaurant 7 Nouilles<ul> <li>best fried chicken and good noodles</li> </ul> </li> <li>Best Tofu<ul> <li>best \u8c46\u8150\u8111</li> </ul> </li> <li>Carr\u00e9 Pain de Mie<ul> <li>best \u9762\u5305 only Carr\u00e9</li> </ul> </li> <li>pho 14<ul> <li>best pho</li> </ul> </li> </ul>"},{"location":"recommendations/#books","title":"Books","text":"<ul> <li>Classic Shell Scripting<ul> <li>get started with bash!</li> </ul> </li> <li>Operating Systems: Three Easy Pieces<ul> <li>great overview of operating systems</li> </ul> </li> <li>A Philosophy of Software Design<ul> <li>very convincing chapters about why we should write documentations</li> </ul> </li> </ul>"},{"location":"recommendations/#london-day-trip-recommendations","title":"London Day Trip Recommendations","text":"<ul> <li>Wimbledon commons<ul> <li>mushroom picking</li> </ul> </li> <li>Epping forest<ul> <li>mushroom picking</li> </ul> </li> </ul>"},{"location":"recommendations/#coffee-beans","title":"Coffee Beans","text":"<ul> <li>Assembly</li> </ul>"},{"location":"things-needed-for-travel/","title":"Just For Me","text":""},{"location":"things-needed-for-travel/#for-going-to-office","title":"For Going To Office","text":"<p>laptop, keyboard, earphones, office key, water bottle, pen, cheatsheets, standup sheets, usbc to usbc cable, a plastic bag, optionally a book,</p>"},{"location":"things-needed-for-travel/#for-dnd","title":"For DnD","text":"<p>player's handbook, character sheet, dices, pen, paper, water bottle,</p>"},{"location":"things-needed-for-travel/#for-travel","title":"For Travel","text":"<p>phone, wallet, keys, passport, BRP, 3 sets of clothes,  2 sets of pyjamas, 4 hand tips, sleeping eyepatch cloth, sleeping back cloth, bath towel, slipper, floss, toothbrush, toothpaste, cotton butts, tissue, hand cream, lip balm, umbrella, converse bag, water bottle, book, pen, paper, earphone, universal socket adapter, iPhone charger, Android charger, glove, cotton glove, belts, sun cream (optionally), ber ber ber,</p> <p>Tepe toothbrush, waterfloss, make ups, camera, 35mm film, invisalign, invisalign cleaning capsule, contact lenses, M clothes, hair brush, face wash, usbc to usb converter, ricoh battery charger,  kindle, kindle charger, ipad, ipad charger, drawing pad,</p>"},{"location":"things-needed-for-travel/#for-working-remotely","title":"For working remotely","text":"<p>laptop, laptop charger, laptop keyboard with new battery, laptop touchpad,  coffee equipments, coffee beans, standup notes, cheatsheets</p>"},{"location":"things-needed-for-travel/#for-going-home","title":"For going home","text":"<p>shaver, shaving blade, shaving cream, coffee equipments, coffee beans, no laptop, not too much clothes, one book only, additional socket converters, additional phone, HK to Guangzhou train ticket, E-sim, </p>"},{"location":"things-needed-for-travel/#bed-setup","title":"Bed Setup","text":"<p>water, hand cream, book, cotton buds, tissue, lip balm, 2 sets of pyjamas, 4 hand tips, sleeping eyepatch cloth, sleeping back cloth,</p>"},{"location":"things-needed-for-travel/#bag-setup","title":"Bag Setup","text":"<p>sunscreen, mask, additional long sleeve cloth, tissue, two phones, umbrella, chinese identity card, water, key (optional),</p>"},{"location":"engineering/bash_how_to___use_command_lpr_to_print_hardcopies_/","title":"use command lpr to print hardcopies","text":"<p>TL;DR: <code>lpr -p -o EPIJ_Silt=1 -o Resolution=720x720dpi -o EPIJ_Qual=307 ./lpoptoins.pdf</code></p> <p>Use <code>lpoptions -l</code> to show custom options for printer, such as <code>EPIJ_Qual/Print Quality: 308 311 *303 309 304 305 306 307</code>.</p> <p>Note that only <code>EPIJ_Qual</code> is used in printing option e.g. <code>lpr -o EPIJ_Qual=308</code>, the text after <code>/</code> is an short description of the option.</p> <p>Example output of <code>lpoptions -l</code></p> <pre><code>$ lpoptions -l\n...\nEPIJ_Ink_/Grayscale: *1 0\nEPIJ_Qual/Print Quality: 308 311 *303 309 304 305 306 307\nColorModel/ColorModel: *RGB Mono\nResolution/Resolution: 180x180dpi *360x360dpi 720x720dpi\nPageSize/Media Size: *A4 EPKG EPKG.NMgn EPPhotoPaper2L A6 A5 B5 B6 EPPhotoPaperLRoll EPPhotoPaperLRoll.NMgn EPIndexCard5x8 EP8x10in EPHiVision102x180 EPHiVision102x180.NMgn EPPostcard100x148 EPPostcard100x148.NMgn Env10 EnvDL EnvC6 Letter EP216x330mm EPIndianLegal Legal EP16K195x270mm Custom.WIDTHxHEIGHT\nEPIJ_Silt/Quiet Mode: *0 1\n...\n</code></pre> <p>upzip <code>/Library/Printers/PPDs/Contents/Resources/EPSON\\ ET-2810\\ Series.gz</code> to <code>~/Documents/downloads/</code> read the mearning of options.</p> <p>Run the following command in the unzipped <code>downloads</code> folder <pre><code>$ cat EPSON\\ ET-2820\\ Series | grep Qua\n...\n*EPIJ_Qual 308/Draft: \"\"\n*EPIJ_Qual 311/Draft-Vivid : \"\"\n*EPIJ_Qual 303/Normal: \"\"\n*EPIJ_Qual 309/Normal-Vivid: \"\"\n*EPIJ_Qual 304/Fine: \"\"\n*EPIJ_Qual 305/Quality: \"\"\n*EPIJ_Qual 306/High Quality: \"\"\n*EPIJ_Qual 307/Best Quality: \"\"\n...\n</code></pre></p> <p>Other Useful Links: </p> <ul> <li>local Cups link: http://localhost:631/<ul> <li>logins with laptops's username and password</li> </ul> </li> <li><code>/private/etc/cups/ppd</code><ul> <li>printer ppd file - Postscript Printer Description file is a file that describes the font s, paper sizes, resolution , and other capabilities that are standard for a particular Postscript printer</li> </ul> </li> </ul>"},{"location":"engineering/engineering_how_to___Best_Practices_/","title":"Best Practices","text":""},{"location":"engineering/engineering_how_to___Best_Practices_/#behavioral-personal-growth","title":"Behavioral - Personal growth","text":"<ul> <li>There is No Such Thing as Over Communication!</li> <li>Look for opportunity for incremental improvement</li> <li>Read documentation/manual/user\u2019s guide before using a new tool/cli<ul> <li>this implies prefer using tool with good doc e.g. <code>fish</code> instead <code>bash</code></li> </ul> </li> <li>Be more curious about how things work internally</li> <li>Be prepared because I am bad at ac-hoc talk and thinking<ul> <li>ask for agenda for meetings so that I can be prepared</li> </ul> </li> <li>Validate assumptions earlier</li> <li>For meetings,<ul> <li>gather questions before meeting</li> <li>set out the purpose of the meetings</li> <li>write meeting minutes and action points</li> </ul> </li> </ul>"},{"location":"engineering/engineering_how_to___Best_Practices_/#documentations-building-structures-with-natural-language","title":"Documentations - Building structures with natural language","text":"<ul> <li>Write non-code How To, repeatable steps for public or personal, e.g.<ul> <li>How-To deploy UAT</li> <li>How-To add a graphql endpoint </li> </ul> </li> <li>Write code comments, documentations before implementation <ul> <li>remember the 4 types of documentation, Tutorial, How-To Step by Step Guides,   Explanation, Reference</li> </ul> </li> <li>Present tense and full sentence</li> </ul>"},{"location":"engineering/engineering_how_to___Best_Practices_/#design-writing-good-code","title":"Design - Writing good code","text":"<ul> <li>Design it twice<ul> <li>write down two designs, each with pros and cons, then perhaps there will   appear a third design with combined pros and less cons</li> </ul> </li> <li>Architect great design rather than just working codes, then writing comments   should be fun since that\u2019s how you identify the best design</li> <li>reduce complexity by adding or removing abstraction</li> <li>Design Goal: reliable, scalable, maintainable</li> </ul> <p>tag: reference, django </p> <ul> <li><code>models</code> field<ul> <li>use <code>help_text</code> as documentation</li> <li>use <code>unique=True</code> is this field must be unique throughout the table </li> </ul> </li> </ul>"},{"location":"engineering/engineering_how_to___Give_consistent_good_PR_review_/","title":"Give consistent good PR review","text":"<ul> <li>add <code>doc string</code> if there is anything unclear</li> <li>understand all code and tests added/modified</li> <li>handle network and other errors gracefully?</li> <li>read and test my comments carefully</li> <li>add ideas about incremental improvements</li> </ul>"},{"location":"engineering/python_how_to___use__pdb__for_debugging_/","title":"use <code>pdb</code> for debugging","text":"<p>Debugging after ssh into uat</p> <p>Prerequisite</p> <p>Go into the ipython shell e.g. <code>sudo docker exec -it oneview-django poetry run python manage.py shell</code></p> <pre><code>In [1]: from oneview.graphql.api.charge import one_fee_calculator\n\nIn [2]: review_id = \"73a07db5-7214-4ead-a9b8-4906e1727a8c\"\n\nIn [3]: import pdb\n        pdb.runcall(one_fee_calculator, review_id)\n[1] &gt; /app/backend/oneview/graphql/api/charge.py(248)one_fee_calculator()\n-&gt; review = Review.objects.get(id=review_id)\n</code></pre> <p>If you do the above, you will be dropped into the pdb debugging shell.</p> <p>Note: please be careful about possible side effects if the functions called especially if you are doing this in uat or even prod environment.</p> <p>pdb</p> <p>pdb is an interactive source code debugger for Python programs.</p> <p>pdb is very powerful, though you need to get familiar with the commands</p> <p>You can find the pdb commands doc  here</p> <p>Most useful commands I find are</p> <ul> <li><code>ll</code> - print all source code for the current function or frame</li> <li><code>b</code> - breakpoint, you can set breakpoint like so <code>b oneview/graphql/api/charge.py:254</code></li> <li><code>c</code> - continue, continue until breakpoint</li> <li><code>n</code> - next, continue execution until the next line</li> <li><code>s</code> - step, step inside a function</li> <li><code>sticky</code> - show whole function while you are debugging, make pdb very much   like debugging with GUI</li> </ul>"},{"location":"engineering/re_reference___Regular_Expression_Atoms_/","title":"Regular Expression Atoms","text":"Rg Vim zero or more <code>?</code> <code>\\?</code> 1 or more <code>+</code> <code>\\+</code> precise number of matches <code>{n,m}</code> <code>\\{n,m}</code> word boundary <code>\\b</code> <code>\\&lt; \\&gt;</code> multiple patterns or <code>|</code> <code>\\|</code> non greedy <code>.*?</code> <code>.\\{-}</code> line starts with <code>^</code> <code>^</code> line ends with <code>$</code> <code>$</code> group <code>( )</code> <code>\\( \\)</code> back reference not supported <code>\\1 \\2 \\3</code> <p>Example: to match <code>company</code> and <code>companies</code></p> <ul> <li>vim: <code>compan\\(y\\|ies\\)</code> </li> <li>rg: <code>compan(y|ies)</code></li> </ul>"},{"location":"engineering/vim_how_to___Extract_Manpage_Table_of_Content_/","title":"Extract Manpage Table of Content","text":"<pre><code>ZSHMISC(1)                   General Commands Manual                  ZSHMISC(1)\nNAME\n       zshmisc - everything and then some\nSIMPLE COMMANDS &amp; PIPELINES\n       A simple command is a sequence of optional parameter assignments followed\n       ...\nPRECOMMAND MODIFIERS\n       A simple command may be preceded by a precommand modifier, which will\n       ...\n</code></pre> <p>I would like the extract a Table of Content from manual page such as below</p> <pre><code>SIMPLE COMMANDS &amp; PIPELINES\nPRECOMMAND MODIFIERS\n</code></pre> <ol> <li><code>:redir @a</code>  - setup redirect to register <code>a</code></li> <li><code>:g/^\\u.*/p</code> - find all lines start with upper case and print them </li> <li><code>:redir END</code> - end the redirection</li> <li><code>\"ap</code>        - paste content in register a </li> </ol>"},{"location":"engineering/vim_how_to___Match_on_the_second_occurrence_/","title":"Match on the second occurrence","text":"<p>For example, I want to match on the second <code>&lt;</code> of the following line</p> <pre><code>cnoremap &lt;c-j&gt;   &lt;down&gt;\ncnoremap &lt;c-k&gt;   &lt;up&gt;\ncnoremap &lt;up&gt;    &lt;nop&gt;\ncnoremap &lt;down&gt;  &lt;nop&gt;\ncnoremap &lt;left&gt;  &lt;nop&gt;\ncnoremap &lt;right&gt; &lt;nop&gt;\n</code></pre> <p>Uses pattern <code>&lt;.*\\zs&lt;</code></p> <ul> <li><code>&lt;</code>   - matches the first <code>&lt;</code></li> <li><code>.*</code>  - greedy matches everything after</li> <li><code>\\zs</code> - resets the start of the pattern matches (a vim specific pattern)</li> <li><code>&lt;</code>   - matches the second <code>&lt;</code></li> </ul> <p>Bonus:</p> <p><code>sed -n 's/&lt;.*\\(&lt;\\)/\\1/p'</code> changes <code>cnoremap &lt;c-j&gt;   &lt;down&gt;</code> to <code>cnoremap &lt;down&gt;</code>, something like delete the first <code>&lt;&gt;</code></p> <p><code>sed -n 's/\\(&lt;.*\\)&lt;.*&gt;/\\1/p'</code> changes <code>cnoremap &lt;c-j&gt;   &lt;down&gt;</code> to <code>cnoremap &lt;c-j&gt;</code>, something like delete the second <code>&lt;&gt;</code></p>"},{"location":"engineering/vim_how_to___run_python_in_vim_terminal_/","title":"run python in vim terminal","text":"<pre><code>:py3 print('abc')\n\n# to change lines in range\n:'&lt;,'&gt;py3do return line.split(\":\")[0] + ' = ' + line.split(\":\")[0].strip() + ','\n\n# run foo.py in current directory, have access to all vim_python objects\n# see `:help python-command`\n:pyfile foo.py\n\n# For example\n#\n# &gt; cat foo.py\n# vim.command('buffers a')\n# for b in vim.buffers:\n#     print(b)\n#     print(b.__dir__())\n#     print(b.valid)\n# visible_buffers = [window.buffer for window in vim.current.tabpage.windows]\n</code></pre>"},{"location":"engineering/vim_reference___Regular_Expression_/","title":"Regular Expression","text":""},{"location":"engineering/vim_reference___Regular_Expression_/#reminders","title":"Reminders","text":"<ul> <li><code>\\zs</code>, <code>ze</code>, modify the start or end of regex match, can make replacing or   searching easier<ul> <li>e.g. <code>\\zs</code> can replace positive look behind<code>@&lt;=</code></li> <li>e.g. <code>\\ze</code> can replace positive look ahead <code>@=</code></li> </ul> </li> <li><code>\\_.</code> matches all characters and end of line, useful for multiline matching<ul> <li><code>.</code> matches all characters but not end of line</li> </ul> </li> <li><code>\\w</code> matches word characters, same as <code>[0-9A-Za-z_]</code></li> <li><code>\\s</code> matches space or tab</li> <li><code>\\{-}</code> non-greedy match, match as little as possible, this is a multi<ul> <li>basically the non-greedy version of <code>*</code></li> </ul> </li> </ul> <p>Intresting Examples</p> <ul> <li><code>\\(def\\s\\)\\@&lt;!foo_function(\\_.\\{-})</code> matches function usage and params   single line or multi lines, but not the function definition </li> <li><code>def\\s\\w*(\\zs\\_.\\{-}\\ze)</code> matches only params in function definitions,   single line or multi lines</li> </ul>"},{"location":"engineering/vim_reference___Regular_Expression_/#definition-of-a-pattern-in-vim","title":"Definition of a pattern in vim","text":"<ul> <li>atom: <code>a</code> an ordinary character, <code>\\i</code> a character class, <code>\\(foo\\)</code>   putting pattern in parenthesis making it an atom</li> <li>piece: atom + multi, <code>*</code>, <code>\\{n,m}</code>, <code>{-}</code><ul> <li>special multi, look ahead <code>\\@=</code>, <code>\\@!</code>, look behind <code>\\@&lt;=</code>,<code>\\@&lt;!</code>, </li> </ul> </li> <li>concat: piece + piece, <code>a*b*</code></li> <li>branch: concat <code>\\&amp;</code> concat, <code>\\&amp;</code> means matching both regex   patterns, like AND</li> <li>pattern: branch <code>\\|</code> branch, <code>\\|</code> means either patterns, like   OR</li> </ul>"},{"location":"engineering/writings_how_to___write_better_/","title":"write better","text":"<p>Scrupulous writers, in every sentence that they write, will ask themselves at least four questions:</p> <ol> <li>What am I trying to say?</li> <li>What words will express it?</li> <li>What image or idiom will make it clearer?</li> <li>Is this image fresh enough to have an effect?</li> </ol> <p>Two more that they may ask are:</p> <ol> <li>Could I put it more shortly?</li> <li>Have I said anything that is avoidably ugly?</li> </ol> <p>Consequently there are ways to write well. The following rules will cover most cases:</p> <ol> <li>Never use a metaphor, simile or other figure of speech which you are used to seeing in print.</li> <li>Never use a long word where a short one will do.</li> <li>If it is possible to cut a word out, always cut it out.</li> <li>Never use the passive where you can use the active.</li> <li>Never use a foreign phrase, a scientific word or a jargon word if you can think of an everyday English equivalent.</li> <li>Break any of these rules sooner than say anything outright barbarous.</li> </ol>"}]}